{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///./src/core/material.js","webpack:///./src/core/node.js","webpack:///./src/core/primitive.js","webpack:///./src/core/program.js","webpack:///./src/core/renderer.js","webpack:///./src/core/texture.js","webpack:///./src/cottontail.js","webpack:///./src/geometry/box-builder.js","webpack:///./src/geometry/primitive-stream.js","webpack:///./src/loaders/gltf2.js","webpack:///./src/materials/pbr.js","webpack:///./src/math/gl-matrix.js","webpack:///./src/math/ray.js","webpack:///./src/nodes/bounds-renderer.js","webpack:///./src/nodes/button.js","webpack:///./src/nodes/cube-sea.js","webpack:///./src/nodes/drop-shadow.js","webpack:///./src/nodes/gltf2.js","webpack:///./src/nodes/input-renderer.js","webpack:///./src/nodes/seven-segment-text.js","webpack:///./src/nodes/skybox.js","webpack:///./src/nodes/stats-viewer.js","webpack:///./src/nodes/video.js","webpack:///./src/scenes/scene.js","webpack:///./src/util/fallback-helper.js","webpack:///./src/util/query-args.js"],"names":["stateToBlendFunc","GL","WebGLRenderingContext","CAP","CULL_FACE","BLEND","DEPTH_TEST","STENCIL_TEST","COLOR_MASK","DEPTH_MASK","STENCIL_MASK","MAT_STATE","CAPS_RANGE","BLEND_SRC_SHIFT","BLEND_SRC_RANGE","BLEND_DST_SHIFT","BLEND_DST_RANGE","BLEND_FUNC_RANGE","DEPTH_FUNC_SHIFT","DEPTH_FUNC_RANGE","RENDER_ORDER","OPAQUE","SKY","TRANSPARENT","ADDITIVE","DEFAULT","state","mask","shift","value","SRC_COLOR","MaterialState","_state","blendFuncSrc","SRC_ALPHA","blendFuncDst","ONE_MINUS_SRC_ALPHA","depthFunc","LESS","NEVER","MaterialSampler","uniformName","_uniformName","_texture","MaterialUniform","defaultValue","length","_value","_length","Array","Material","renderOrder","_samplers","_uniforms","sampler","push","uniform","renderPrimitive","DEFAULT_TRANSLATION","Float32Array","DEFAULT_ROTATION","DEFAULT_SCALE","tmpRayMatrix","mat4","create","Node","name","children","parent","visible","selectable","_matrix","_dirtyTRS","_translation","_rotation","_scale","_dirtyWorldMatrix","_worldMatrix","_activeFrameId","_hoverFrameId","_renderPrimitives","_renderer","_selectHandler","renderer","clearRenderPrimitives","onRendererChanged","child","_setRenderer","cloneNode","vec3","copy","quat","waitForComplete","then","primitive","addRenderPrimitive","addNode","clone","frameId","markActive","removeNode","i","indexOf","splice","setMatrixDirty","fromRotationTranslationScale","childPromises","Promise","all","_instances","index","ray","localRay","_min","invert","worldMatrix","multiply","transformMatrix","Ray","intersection","intersectsAABB","_max","transformMat4","_hitTestSelectableNode","origin","fromValues","x","y","z","node","distance","result","childResult","hitTest","timestamp","frameDelta","onUpdate","_update","_updateLocalMatrix","mul","PrimitiveAttribute","buffer","componentCount","componentType","stride","byteOffset","normalized","Primitive","attributes","elementCount","mode","indexBuffer","indexByteOffset","indexType","min","max","Program","gl","vertSrc","fragSrc","attribMap","defines","_gl","program","createProgram","attrib","_firstUse","_nextUseCallbacks","definesString","define","_vertShader","createShader","VERTEX_SHADER","attachShader","shaderSource","compileShader","_fragShader","FRAGMENT_SHADER","attribName","bindAttribLocation","linkProgram","callback","getProgramParameter","LINK_STATUS","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","getProgramInfoLog","deleteProgram","attribCount","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","uniformCount","ACTIVE_UNIFORMS","uniformInfo","getActiveUniform","replace","getUniformLocation","deleteShader","useProgram","createWebGLContext","ATTRIB","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","ATTRIB_MASK","DEF_LIGHT_DIR","DEF_LIGHT_COLOR","PRECISION_REGEX","RegExp","VERTEX_SHADER_SINGLE_ENTRY","VERTEX_SHADER_MULTI_ENTRY","FRAGMENT_SHADER_ENTRY","isPowerOfTwo","n","glAttribs","alpha","webglCanvas","document","createElement","contextTypes","webgl2","context","contextType","getContext","webglType","RenderView","projectionMatrix","viewMatrix","viewport","eye","_eye","_eyeIndex","RenderBuffer","target","usage","_target","_usage","_buffer","_promise","resolve","RenderPrimitiveAttribute","primitiveAttribute","_attrib_index","_componentCount","_componentType","_stride","_byteOffset","_normalized","RenderPrimitiveAttributeBuffer","_attributes","RenderPrimitive","_material","setPrimitive","_mode","_elementCount","_vao","_complete","_attributeBuffers","_attributeMask","attribute","renderAttribute","foundBuffer","attributeBuffer","_indexBuffer","_indexByteOffset","_indexType","material","reject","completionPromises","_samplerDictionary","_uniform_dictionary","RenderTexture","texture","_activeCallback","inverseMatrix","setCap","glEnum","cap","prevState","change","enable","disable","RenderMaterialSampler","materialSampler","_renderTexture","_getRenderTexture","_index","RenderMaterialUniform","materialUniform","_uniform","RenderMaterial","_program","_completeForActiveFrame","renderSampler","renderUniform","_firstBind","_renderOrder","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","uniform1fv","uniform2fv","uniform3fv","uniform4fv","otherState","Renderer","_frameId","_programCache","_textureCache","_cameraPositions","_vaoExt","getExtension","fragHighPrecision","getShaderPrecisionFormat","HIGH_FLOAT","_defaultFragPrecision","precision","_depthMaskNeedsReset","_colorMaskNeedsReset","_globalLightColor","_globalLightDir","data","STATIC_DRAW","glBuffer","createBuffer","renderBuffer","bindBuffer","bufferData","byteLength","offset","bufferSubData","updateRenderBuffer","_getMaterialProgram","renderMaterial","setRenderMaterial","meshNode","createRenderPrimitive","views","rootNode","vp","width","height","cameraPosition","set","renderPrimitives","_drawRenderPrimitiveSet","bindVertexArrayOES","depthMask","colorMask","attribMask","use","LIGHT_DIRECTION","LIGHT_COLOR","uniformMatrix4fv","PROJECTION_MATRIX","VIEW_MATRIX","CAMERA_POSITION","uniform1i","EYE_INDEX","eyeIndex","_bindMaterialState","bind","createVertexArrayOES","_bindPrimitive","view","instance","MODEL_MATRIX","drawElements","drawArrays","key","textureKey","Error","textureHandle","createTexture","renderTexture","DataTexture","texImage2D","format","_type","_data","_setSamplerParameters","UNSIGNED_BYTE","source","VideoTexture","_video","addEventListener","paused","waiting","powerOfTwo","mipmap","generateMipmap","minFilter","LINEAR_MIPMAP_LINEAR","LINEAR","wrapS","REPEAT","CLAMP_TO_EDGE","wrapT","texParameteri","TEXTURE_MAG_FILTER","magFilter","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","materialName","vertexSource","fragmentSource","getProgramDefines","_getProgramKey","multiview","fullVertexSource","precisionMatch","match","fragPrecisionHeader","fullFragmentSource","onNextUse","enableVertexAttribArray","disableVertexAttribArray","ARRAY_BUFFER","vertexAttribPointer","ELEMENT_ARRAY_BUFFER","prevMaterial","_capsDiff","colorMaskChange","depthMaskChange","stencilMaskChange","stencilMask","_blendDiff","blendFunc","_depthFuncDiff","TextureSampler","Texture","RGBA","ImageTexture","img","_img","_imgBitmap","src","complete","naturalWidth","_finishImage","window","createImageBitmap","imgBitmap","UrlTexture","url","Image","BlobTexture","blob","URL","createObjectURL","video","readyState","videoWidth","videoHeight","nextDataTextureIndex","type","_width","_height","_format","_key","ColorTexture","r","g","b","a","colorData","Uint8Array","PrimitiveStream","BoxBuilder","PbrMaterial","mat3","vec4","BoundsRenderer","ButtonNode","DropShadowNode","CubeSeaNode","Gltf2Node","SkyboxNode","VideoNode","WebXRView","Scene","FallbackHelper","QueryArgs","stream","primitiveStream","w","h","d","wh","hh","dh","cx","cy","cz","startGeometry","idx","nextVertexIndex","pushTriangle","pushVertex","endGeometry","center","size","hs","pushBox","GeometryBuilderBase","tempVec3","options","_vertices","_indices","_geometryStarted","_vertexOffset","_vertexIndex","_highIndex","_flipWinding","_invertNormals","_transform","_normalTransform","u","v","nx","ny","nz","transformMat3","Math","idxA","idxB","idxC","vertexBuffer","createRenderBuffer","Uint16Array","attribs","FLOAT","setIndexBuffer","setBounds","fromMat4","_stream","finishPrimitive","clear","GLB_MAGIC","CHUNK_TYPE","JSON","BIN","isAbsoluteUri","uri","absRegEx","location","protocol","isDataUri","dataRegEx","resolveUri","baseUrl","getComponentCount","Gltf2Loader","fetch","response","lastIndexOf","substring","endsWith","json","loadFromJson","arrayBuffer","loadFromBinary","headerView","DataView","magic","getUint32","version","chunks","chunkOffset","chunkHeaderView","chunkLength","chunkType","slice","decoder","TextDecoder","jsonString","decode","parse","binaryChunk","asset","minVersion","buffers","Gltf2Resource","bufferViews","bufferView","Gltf2BufferView","images","image","textures","glTexture","getTexture","textureInfo","materials","glMaterial","pbr","pbrMetallicRoughness","baseColorFactor","baseColor","baseColorTexture","metallicRoughnessFactor","metallicFactor","roughnessFactor","metallicRoughness","metallicRoughnessTexture","normal","normalTexture","occlusion","occlusionTexture","occlusionStrength","strength","emissiveFactor","emissive","emissiveTexture","alphaMode","blend","cullFace","doubleSided","accessors","meshes","mesh","glMesh","Gltf2Mesh","primitives","accessor","count","glAttribute","byteStride","glPrimitive","indices","sceneNode","scene","scenes","nodes","nodeId","processNodes","glNode","matrix","translation","rotation","scale","_viewPromise","_renderBuffer","dataView","_dataPromise","base64String","binaryArray","from","atob","c","charCodeAt","Blob","mimeType","VERTEX_SOURCE","EPIC_PBR_FUNCTIONS","FRAGMENT_SOURCE","defineSampler","defineUniform","programDefines","glMatrix","mat2","mat2d","quat2","vec2","normalMat","RAY_INTERSECTION_OFFSET","_dir","dir","bounds","tmin","sign","inv_dir","tmax","tymin","tymax","tzmin","tzmax","t","intersectionPoint","add","normalize","BoundsMaterial","ONE","depthTest","_stageBounds","stageBounds","verts","pointCount","geometry","point","BUTTON_SIZE","BUTTON_CORNER_RADIUS","BUTTON_CORNER_SEGMENTS","BUTTON_ICON_SIZE","BUTTON_LAYER_DISTANCE","BUTTON_COLOR","BUTTON_ALPHA","BUTTON_HOVER_COLOR","BUTTON_HOVER_ALPHA","BUTTON_HOVER_SCALE","BUTTON_HOVER_TRANSITION_TIME_MS","ButtonMaterial","ButtonIconMaterial","icon","iconTexture","_iconTexture","_hovered","_hoverT","hd","ihs","segments","rad","PI","cos","sin","section","floor","buttonPrimitive","_buttonRenderPrimitive","iconPrimitive","iconMaterial","_iconRenderPrimitive","hoverAmount","uniforms","_updateHoverState","samplers","CubeSeaMaterial","heavy","heavyGpu","cubeCount","cubeScale","halfOnly","autoRotate","imageUrl","_renderPrimitive","boxBuilder","pushCube","heroPrimitive","heroNode","createMesh","rebuildCubes","cubeSeaNode","halfGrid","pos","cubeSeaPrimitive","fromRotation","SHADOW_SEGMENTS","SHADOW_GROUND_OFFSET","SHADOW_CENTER_ALPHA","SHADOW_INNER_ALPHA","SHADOW_OUTER_ALPHA","SHADOW_INNER_RADIUS","SHADOW_OUTER_RADIUS","DropShadowMaterial","LEQUAL","segRad","shadowPrimitive","_shadowRenderPrimitive","gltfLoaderMap","WeakMap","_url","_resolver","_rejecter","loader","get","_ensurePromise","loadFromUrl","catch","err","LASER_TEXTURE_DATA","LASER_LENGTH","LASER_DIAMETER","LASER_FADE_END","LASER_FADE_POINT","LASER_DEFAULT_COLOR","CURSOR_RADIUS","CURSOR_SHADOW_RADIUS","CURSOR_SHADOW_INNER_LUMINANCE","CURSOR_SHADOW_OUTER_LUMINANCE","CURSOR_SHADOW_INNER_OPACITY","CURSOR_SHADOW_OUTER_OPACITY","CURSOR_OPACITY","CURSOR_SEGMENTS","CURSOR_DEFAULT_COLOR","CURSOR_DEFAULT_HIDDEN_COLOR","DEFAULT_RESET_OPTIONS","controllers","lasers","cursors","LaserMaterial","laser","laserColor","CURSOR_VERTEX_SHADER","CURSOR_FRAGMENT_SHADER","CursorMaterial","cursorColor","CursorHiddenMaterial","GEQUAL","InputRenderer","_maxInputElements","_controllers","_controllerNode","_controllerNodeHandedness","_lasers","_cursors","_activeControllers","_activeLasers","_activeCursors","controllerNode","handedness","gripMatrix","controller","targetRay","_createLaserMesh","cursorPos","_createCursorMesh","cursor","lr","ll","laserVerts","laserIndices","laserVertexBuffer","laserIndexBuffer","laserIndexCount","laserAttribs","laserPrimitive","laserMaterial","laserRenderPrimitive","cursorVerts","cursorIndices","indexOffset","cursorVertexBuffer","cursorIndexBuffer","cursorIndexCount","cursorAttribs","cursorPrimitive","cursorMaterial","cursorHiddenMaterial","cursorRenderPrimitive","cursorHiddenRenderPrimitive","TEXT_KERNING","SevenSegmentMaterial","SevenSegmentText","_text","_charNodes","clearNodes","vertices","segmentIndices","thickness","defineSegment","id","left","top","right","bottom","characters","defineCharacter","character","segment","vertexAttribs","_charPrimitives","char","charDef","text","charPrimitive","SkyboxMaterial","texCoordScaleOffset","_displayMode","displayMode","_rotationY","rotationY","latSegments","lonSegments","theta","sinTheta","cosTheta","idxOffsetA","idxOffsetB","j","phi","SEGMENTS","MAX_FPS","StatsMaterial","segmentToX","fpsToY","fpsToRGB","now","performance","Date","StatsViewer","_performanceMonitoring","_startTime","_prevFrameTime","_prevGraphUpdateTime","_frames","_fpsAverage","_fpsMin","_fpsStep","_lastSegment","_fpsVertexBuffer","_fpsRenderPrimitive","_fpsNode","_sevenSegmentNode","fpsVerts","fpsIndices","addBGSquare","DYNAMIC_DRAW","fpsIndexBuffer","fpsAttribs","fpsPrimitive","time","frameFps","intervalTime","round","_updateGraph","log","valueLow","valueHigh","color","y0","y1","updateVerts","VideoMaterial","_video_texture","pose","layer","getViewport","_timestamp","_frameDelta","_statsStanding","_stats","_statsEnabled","enableStats","_inputRenderer","_resetInputEndFrame","_lastTimestamp","_hoverFrame","_hoveredNodes","frame","refSpace","session","getInputSources","inputSources","newHoveredNodes","lastHoverFrame","inputSource","inputPose","getInputPose","gripTransform","inputRenderer","addController","targetRayMode","addLaserPointer","hitResult","addCursor","onHoverStart","cursorDistance","direction","hoverNode","onHoverEnd","handleSelectPointer","handleSelect","fromEuler","drawViewArray","xrFrame","renderState","baseLayer","bindFramebuffer","FRAMEBUFFER","framebuffer","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawViews","prevTimestamp","begin","reset","end","LOOK_SPEED","_emulateStage","lookYaw","lookPitch","identity","onResize","canvas","offsetWidth","devicePixelRatio","offsetHeight","perspective","drawingBufferWidth","drawingBufferHeight","lastTouchX","lastTouchY","ev","touches","pageX","pageY","onLook","buttons","movementX","movementY","preventDefault","boundOnFrame","onFrame","requestAnimationFrame","yaw","pitch","updateView","startFrame","draw","endFrame","rotateX","rotateY","translate","urlArgs","onhashchange","ensureArgsCached","query","search","hash","vars","split","pair","toLowerCase","decodeURIComponent","lcaseName","parseInt","parseFloat"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACO;AACA;AACA;;AAEP;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;;AAEvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC,KAAK,qDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;;;;;;;;;;;;AC9ZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACO;AACP,gBAAgB,qDAAmB;AACnC,KAAK,qDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C;;AAEA;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;;;;;;;;;;;;AC/bP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC,KAAK,qDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C;;AAEA;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;;;;;;;;;;;;AC1uBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC,KAAK,qDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,WAAW,WAAW;AAClC;AACA;AACA;AACA;;AAEA,YAAY,WAAW,YAAY;AACnC;AACA;AACA;AACA;;AAEA,aAAa,YAAY,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,aAAa;;AAExC,iBAAiB,cAAc,cAAc;AAC7C,iBAAiB,cAAc,cAAc;AAC7C,iBAAiB,cAAc,eAAe;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,kDAAgB,GAAG,aAAa;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,YAAY,YAAY;AACrC,aAAa,YAAY,YAAY;AACrC,aAAa,YAAY,aAAa;;AAEtC;AACA,sBAAsB,yBAAyB;AAC/C,0BAA0B,qBAAqB;AAC/C,0BAA0B,yBAAyB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA,YAAY,kDAAgB,GAAG,aAAa;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACO;AACP,wBAAwB,qDAAmB;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,kDAAgB;AACjD,iCAAiC,kDAAgB;AACjD,iCAAiC,kDAAgB;AACjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,iCAAiC,kDAAgB;AACjD,iCAAiC,kDAAgB;AACjD,iCAAiC,kDAAgB;AACjD,iCAAiC,kDAAgB;AACjD,iCAAiC,kDAAgB;AACjD,iCAAiC,kDAAgB;AACjD;;AAEA;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;;;;;;;;;;;;AClrDP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACN;AACA;AACA;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC,KAAK,qDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA,UAAU,kDAAgB;AAC1B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kDAAgB;AACvC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA,WAAW,iDAAe;AAC1B,WAAW,iDAAe;AAC1B,WAAW,iDAAe;;AAE1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA,sBAAsB;AACtB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,aAAa,KAAK;AAClB;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACO,cAAc,8CAAU;;AAE/B;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACO,mBAAmB,mDAAe;;AAEzC;AACA;AACA;AACA,WAAW,KAAK;AA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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP,eAAe,qDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP,eAAe,qDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA,cAAc,+CAAW;AACzB,EAAE,oDAAgB;AAClB,cAAc,qDAAmB;AACjC,EAAE,uDAAmB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACO,gBAAgB,6CAAS;;AAEhC;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO,gBAAgB,6CAAS;;AAEhC;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gDAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gDAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gDAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA,sBAAsB,kDAAgB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACO,YAAY,4CAAQ;;AAE3B;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACO,eAAe,+CAAW;;AAEjC;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACO,sBAAsB,sDAAkB;;AAE/C;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kDAAgB;AAC/C,yBAAyB,kDAAgB;AACzC,yBAAyB,kDAAgB;AACzC,yBAAyB,kDAAgB;AACzC,yBAAyB,kDAAgB;AACzC,yBAAyB,kDAAgB;AACzC,yBAAyB,kDAAgB;AACzC,yBAAyB,kDAAgB;AACzC;;;;;;;;;;;;;ACr1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC,KAAK,qDAAmB;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA,UAAU,iDAAe;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C;;AAEA;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;AChnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC,KAAK,qDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA,UAAU,iDAAe;AACzB,WAAW,iDAAe;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C;;AAEA;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,OAAO;AAC1B,oBAAoB,iBAAiB;AACrC;AACA,oBAAoB,iBAAiB;AACrC;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;AChwBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC,KAAK,qDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iDAAe;AACxB,SAAS,iDAAe;AACxB;AACA,GAAG;AACH;AACA,SAAS,iDAAe;AACxB,SAAS,iDAAe;AACxB;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C,+BAA+B,kDAAgB;AAC/C;;AAEA;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA,cAAc;AACd;AACA;AACO;;AAEP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP;;AAEA;AACA;AAC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","file":"cottontail.debug.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/cottontail.js\");\n","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\"\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nexport function fromValues(m00, m01, m10, m11) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    let a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2), nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = (2 * far * near) * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > glMatrix.EPSILON ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  let u1 = glMatrix.RANDOM();\n  let u2 = glMatrix.RANDOM();\n  let u3 = glMatrix.RANDOM();\n\n  let sqrt1MinusU1 = Math.sqrt(1 - u1);\n  let sqrtU1 = Math.sqrt(u1);\n\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n  dq[3] = 1;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q quaternion\n * @param {vec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {vec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {mat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {quat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to translate\n * @param {vec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {quat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat} q quaternion to rotate by\n * @param {quat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {vec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = s * axis[0] / axisLength;\n  let by = s * axis[1] / axisLength;\n  let bz = s * axis[2] / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {quat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {quat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n\n    let a0 = a[0] / magnitude;\n    let a1 = a[1] / magnitude;\n    let a2 = a[2] / magnitude;\n    let a3 = a[3] / magnitude;\n\n    let b0 = a[4];\n    let b1 = a[5];\n    let b2 = a[6];\n    let b3 = a[7];\n\n    let a_dot_b = (a0 * b0) + (a1 * b1) + (a2 * b2) + (a3 * b3);\n\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n\n    out[4] = (b0 - (a0 * a_dot_b)) / magnitude;\n    out[5] = (b1 - (a1 * a_dot_b)) / magnitude;\n    out[6] = (b2 - (a2 * a_dot_b)) / magnitude;\n    out[7] = (b3 - (a3 * a_dot_b)) / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {quat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat2} a the first dual quaternion.\n * @param {quat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {quat2} a the first dual quat.\n * @param {quat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nconst GL = WebGLRenderingContext; // For enums\n\nexport const CAP = {\n  // Enable caps\n  CULL_FACE: 0x001,\n  BLEND: 0x002,\n  DEPTH_TEST: 0x004,\n  STENCIL_TEST: 0x008,\n  COLOR_MASK: 0x010,\n  DEPTH_MASK: 0x020,\n  STENCIL_MASK: 0x040,\n};\n\nexport const MAT_STATE = {\n  CAPS_RANGE: 0x000000FF,\n  BLEND_SRC_SHIFT: 8,\n  BLEND_SRC_RANGE: 0x00000F00,\n  BLEND_DST_SHIFT: 12,\n  BLEND_DST_RANGE: 0x0000F000,\n  BLEND_FUNC_RANGE: 0x0000FF00,\n  DEPTH_FUNC_SHIFT: 16,\n  DEPTH_FUNC_RANGE: 0x000F0000,\n};\n\nexport const RENDER_ORDER = {\n  // Render opaque objects first.\n  OPAQUE: 0,\n\n  // Render the sky after all opaque object to save fill rate.\n  SKY: 1,\n\n  // Render transparent objects next so that the opaqe objects show through.\n  TRANSPARENT: 2,\n\n  // Finally render purely additive effects like pointer rays so that they\n  // can render without depth mask.\n  ADDITIVE: 3,\n\n  // Render order will be picked based on the material properties.\n  DEFAULT: 4,\n};\n\nexport function stateToBlendFunc(state, mask, shift) {\n  let value = (state & mask) >> shift;\n  switch (value) {\n    case 0:\n    case 1:\n      return value;\n    default:\n      return (value - 2) + GL.SRC_COLOR;\n  }\n}\n\nexport class MaterialState {\n  constructor() {\n    this._state = CAP.CULL_FACE |\n                  CAP.DEPTH_TEST |\n                  CAP.COLOR_MASK |\n                  CAP.DEPTH_MASK;\n\n    // Use a fairly commonly desired blend func as the default.\n    this.blendFuncSrc = GL.SRC_ALPHA;\n    this.blendFuncDst = GL.ONE_MINUS_SRC_ALPHA;\n\n    this.depthFunc = GL.LESS;\n  }\n\n  get cullFace() {\n    return !!(this._state & CAP.CULL_FACE);\n  }\n  set cullFace(value) {\n    if (value) {\n      this._state |= CAP.CULL_FACE;\n    } else {\n      this._state &= ~CAP.CULL_FACE;\n    }\n  }\n\n  get blend() {\n    return !!(this._state & CAP.BLEND);\n  }\n  set blend(value) {\n    if (value) {\n      this._state |= CAP.BLEND;\n    } else {\n      this._state &= ~CAP.BLEND;\n    }\n  }\n\n  get depthTest() {\n    return !!(this._state & CAP.DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (value) {\n      this._state |= CAP.DEPTH_TEST;\n    } else {\n      this._state &= ~CAP.DEPTH_TEST;\n    }\n  }\n\n  get stencilTest() {\n    return !!(this._state & CAP.STENCIL_TEST);\n  }\n  set stencilTest(value) {\n    if (value) {\n      this._state |= CAP.STENCIL_TEST;\n    } else {\n      this._state &= ~CAP.STENCIL_TEST;\n    }\n  }\n\n  get colorMask() {\n    return !!(this._state & CAP.COLOR_MASK);\n  }\n  set colorMask(value) {\n    if (value) {\n      this._state |= CAP.COLOR_MASK;\n    } else {\n      this._state &= ~CAP.COLOR_MASK;\n    }\n  }\n\n  get depthMask() {\n    return !!(this._state & CAP.DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (value) {\n      this._state |= CAP.DEPTH_MASK;\n    } else {\n      this._state &= ~CAP.DEPTH_MASK;\n    }\n  }\n\n  get depthFunc() {\n    return ((this._state & MAT_STATE.DEPTH_FUNC_RANGE) >> MAT_STATE.DEPTH_FUNC_SHIFT) + GL.NEVER;\n  }\n  set depthFunc(value) {\n    value = value - GL.NEVER;\n    this._state &= ~MAT_STATE.DEPTH_FUNC_RANGE;\n    this._state |= (value << MAT_STATE.DEPTH_FUNC_SHIFT);\n  }\n\n  get stencilMask() {\n    return !!(this._state & CAP.STENCIL_MASK);\n  }\n  set stencilMask(value) {\n    if (value) {\n      this._state |= CAP.STENCIL_MASK;\n    } else {\n      this._state &= ~CAP.STENCIL_MASK;\n    }\n  }\n\n  get blendFuncSrc() {\n    return stateToBlendFunc(this._state, MAT_STATE.BLEND_SRC_RANGE, MAT_STATE.BLEND_SRC_SHIFT);\n  }\n  set blendFuncSrc(value) {\n    switch (value) {\n      case 0:\n      case 1:\n        break;\n      default:\n        value = (value - GL.SRC_COLOR) + 2;\n    }\n    this._state &= ~MAT_STATE.BLEND_SRC_RANGE;\n    this._state |= (value << MAT_STATE.BLEND_SRC_SHIFT);\n  }\n\n  get blendFuncDst() {\n    return stateToBlendFunc(this._state, MAT_STATE.BLEND_DST_RANGE, MAT_STATE.BLEND_DST_SHIFT);\n  }\n  set blendFuncDst(value) {\n    switch (value) {\n      case 0:\n      case 1:\n        break;\n      default:\n        value = (value - GL.SRC_COLOR) + 2;\n    }\n    this._state &= ~MAT_STATE.BLEND_DST_RANGE;\n    this._state |= (value << MAT_STATE.BLEND_DST_SHIFT);\n  }\n}\n\nclass MaterialSampler {\n  constructor(uniformName) {\n    this._uniformName = uniformName;\n    this._texture = null;\n  }\n\n  get texture() {\n    return this._texture;\n  }\n\n  set texture(value) {\n    this._texture = value;\n  }\n}\n\nclass MaterialUniform {\n  constructor(uniformName, defaultValue, length) {\n    this._uniformName = uniformName;\n    this._value = defaultValue;\n    this._length = length;\n    if (!this._length) {\n      if (defaultValue instanceof Array) {\n        this._length = defaultValue.length;\n      } else {\n        this._length = 1;\n      }\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n  }\n}\n\nexport class Material {\n  constructor() {\n    this.state = new MaterialState;\n    this.renderOrder = RENDER_ORDER.DEFAULT;\n    this._samplers = [];\n    this._uniforms = [];\n  }\n\n  defineSampler(uniformName) {\n    let sampler = new MaterialSampler(uniformName);\n    this._samplers.push(sampler);\n    return sampler;\n  }\n\n  defineUniform(uniformName, defaultValue=null, length=0) {\n    let uniform = new MaterialUniform(uniformName, defaultValue, length);\n    this._uniforms.push(uniform);\n    return uniform;\n  }\n\n  get materialName() {\n    return null;\n  }\n\n  get vertexSource() {\n    return null;\n  }\n\n  get fragmentSource() {\n    return null;\n  }\n\n  getProgramDefines(renderPrimitive) {\n    return {};\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {Ray} from '../math/ray.js';\nimport {mat4, vec3, quat} from '../math/gl-matrix.js';\n\nconst DEFAULT_TRANSLATION = new Float32Array([0, 0, 0]);\nconst DEFAULT_ROTATION = new Float32Array([0, 0, 0, 1]);\nconst DEFAULT_SCALE = new Float32Array([1, 1, 1]);\n\nlet tmpRayMatrix = mat4.create();\n\nexport class Node {\n  constructor() {\n    this.name = null; // Only for debugging\n    this.children = [];\n    this.parent = null;\n    this.visible = true;\n    this.selectable = false;\n\n    this._matrix = null;\n\n    this._dirtyTRS = false;\n    this._translation = null;\n    this._rotation = null;\n    this._scale = null;\n\n    this._dirtyWorldMatrix = false;\n    this._worldMatrix = null;\n\n    this._activeFrameId = -1;\n    this._hoverFrameId = -1;\n    this._renderPrimitives = null;\n    this._renderer = null;\n\n    this._selectHandler = null;\n  }\n\n  _setRenderer(renderer) {\n    if (this._renderer == renderer) {\n      return;\n    }\n\n    if (this._renderer) {\n      // Changing the renderer removes any previously attached renderPrimitives\n      // from a different renderer.\n      this.clearRenderPrimitives();\n    }\n\n    this._renderer = renderer;\n    if (renderer) {\n      this.onRendererChanged(renderer);\n\n      for (let child of this.children) {\n        child._setRenderer(renderer);\n      }\n    }\n  }\n\n  onRendererChanged(renderer) {\n    // Override in other node types to respond to changes in the renderer.\n  }\n\n  // Create a clone of this node and all of it's children. Does not duplicate\n  // RenderPrimitives, the cloned nodes will be treated as new instances of the\n  // geometry.\n  clone() {\n    let cloneNode = new Node();\n    cloneNode.name = this.name;\n    cloneNode.visible = this.visible;\n    cloneNode._renderer = this._renderer;\n\n    cloneNode._dirtyTRS = this._dirtyTRS;\n\n    if (this._translation) {\n      cloneNode._translation = vec3.create();\n      vec3.copy(cloneNode._translation, this._translation);\n    }\n\n    if (this._rotation) {\n      cloneNode._rotation = quat.create();\n      quat.copy(cloneNode._rotation, this._rotation);\n    }\n\n    if (this._scale) {\n      cloneNode._scale = vec3.create();\n      vec3.copy(cloneNode._scale, this._scale);\n    }\n\n    // Only copy the matrices if they're not already dirty.\n    if (!cloneNode._dirtyTRS && this._matrix) {\n      cloneNode._matrix = mat4.create();\n      mat4.copy(cloneNode._matrix, this._matrix);\n    }\n\n    cloneNode._dirtyWorldMatrix = this._dirtyWorldMatrix;\n    if (!cloneNode._dirtyWorldMatrix && this._worldMatrix) {\n      cloneNode._worldMatrix = mat4.create();\n      mat4.copy(cloneNode._worldMatrix, this._worldMatrix);\n    }\n\n    this.waitForComplete().then(() => {\n      if (this._renderPrimitives) {\n        for (let primitive of this._renderPrimitives) {\n          cloneNode.addRenderPrimitive(primitive);\n        }\n      }\n\n      for (let child of this.children) {\n        cloneNode.addNode(child.clone());\n      }\n    });\n\n    return cloneNode;\n  }\n\n  markActive(frameId) {\n    if (this.visible && this._renderPrimitives) {\n      this._activeFrameId = frameId;\n      for (let primitive of this._renderPrimitives) {\n        primitive.markActive(frameId);\n      }\n    }\n\n    for (let child of this.children) {\n      if (child.visible) {\n        child.markActive(frameId);\n      }\n    }\n  }\n\n  addNode(value) {\n    if (!value || value.parent == this) {\n      return;\n    }\n\n    if (value.parent) {\n      value.parent.removeNode(value);\n    }\n    value.parent = this;\n\n    this.children.push(value);\n\n    if (this._renderer) {\n      value._setRenderer(this._renderer);\n    }\n  }\n\n  removeNode(value) {\n    let i = this.children.indexOf(value);\n    if (i > -1) {\n      this.children.splice(i, 1);\n      value.parent = null;\n    }\n  }\n\n  clearNodes() {\n    for (let child of this.children) {\n      child.parent = null;\n    }\n    this.children = [];\n  }\n\n  setMatrixDirty() {\n    if (!this._dirtyWorldMatrix) {\n      this._dirtyWorldMatrix = true;\n      for (let child of this.children) {\n        child.setMatrixDirty();\n      }\n    }\n  }\n\n  _updateLocalMatrix() {\n    if (!this._matrix) {\n      this._matrix = mat4.create();\n    }\n\n    if (this._dirtyTRS) {\n      this._dirtyTRS = false;\n      mat4.fromRotationTranslationScale(\n        this._matrix,\n        this._rotation || DEFAULT_ROTATION,\n        this._translation || DEFAULT_TRANSLATION,\n        this._scale || DEFAULT_SCALE);\n    }\n\n    return this._matrix;\n  }\n\n  set matrix(value) {\n    if (value) {\n      if (!this._matrix) {\n        this._matrix = mat4.create();\n      }\n      mat4.copy(this._matrix, value);\n    } else {\n      this._matrix = null;\n    }\n    this.setMatrixDirty();\n    this._dirtyTRS = false;\n    this._translation = null;\n    this._rotation = null;\n    this._scale = null;\n  }\n\n  get matrix() {\n    this.setMatrixDirty();\n\n    return this._updateLocalMatrix();\n  }\n\n  get worldMatrix() {\n    if (!this._worldMatrix) {\n      this._dirtyWorldMatrix = true;\n      this._worldMatrix = mat4.create();\n    }\n\n    if (this._dirtyWorldMatrix || this._dirtyTRS) {\n      if (this.parent) {\n        // TODO: Some optimizations that could be done here if the node matrix\n        // is an identity matrix.\n        mat4.mul(this._worldMatrix, this.parent.worldMatrix, this._updateLocalMatrix());\n      } else {\n        mat4.copy(this._worldMatrix, this._updateLocalMatrix());\n      }\n      this._dirtyWorldMatrix = false;\n    }\n\n    return this._worldMatrix;\n  }\n\n  // TODO: Decompose matrix when fetching these?\n  set translation(value) {\n    if (value != null) {\n      this._dirtyTRS = true;\n      this.setMatrixDirty();\n    }\n    this._translation = value;\n  }\n\n  get translation() {\n    this._dirtyTRS = true;\n    this.setMatrixDirty();\n    if (!this._translation) {\n      this._translation = vec3.clone(DEFAULT_TRANSLATION);\n    }\n    return this._translation;\n  }\n\n  set rotation(value) {\n    if (value != null) {\n      this._dirtyTRS = true;\n      this.setMatrixDirty();\n    }\n    this._rotation = value;\n  }\n\n  get rotation() {\n    this._dirtyTRS = true;\n    this.setMatrixDirty();\n    if (!this._rotation) {\n      this._rotation = quat.clone(DEFAULT_ROTATION);\n    }\n    return this._rotation;\n  }\n\n  set scale(value) {\n    if (value != null) {\n      this._dirtyTRS = true;\n      this.setMatrixDirty();\n    }\n    this._scale = value;\n  }\n\n  get scale() {\n    this._dirtyTRS = true;\n    this.setMatrixDirty();\n    if (!this._scale) {\n      this._scale = vec3.clone(DEFAULT_SCALE);\n    }\n    return this._scale;\n  }\n\n  waitForComplete() {\n    let childPromises = [];\n    for (let child of this.children) {\n      childPromises.push(child.waitForComplete());\n    }\n    if (this._renderPrimitives) {\n      for (let primitive of this._renderPrimitives) {\n        childPromises.push(primitive.waitForComplete());\n      }\n    }\n    return Promise.all(childPromises).then(() => this);\n  }\n\n  get renderPrimitives() {\n    return this._renderPrimitives;\n  }\n\n  addRenderPrimitive(primitive) {\n    if (!this._renderPrimitives) {\n      this._renderPrimitives = [primitive];\n    } else {\n      this._renderPrimitives.push(primitive);\n    }\n    primitive._instances.push(this);\n  }\n\n  removeRenderPrimitive(primitive) {\n    if (!this._renderPrimitives) {\n      return;\n    }\n\n    let index = this._renderPrimitives._instances.indexOf(primitive);\n    if (index > -1) {\n      this._renderPrimitives._instances.splice(index, 1);\n\n      index = primitive._instances.indexOf(this);\n      if (index > -1) {\n        primitive._instances.splice(index, 1);\n      }\n\n      if (!this._renderPrimitives.length) {\n        this._renderPrimitives = null;\n      }\n    }\n  }\n\n  clearRenderPrimitives() {\n    if (this._renderPrimitives) {\n      for (let primitive of this._renderPrimitives) {\n        let index = primitive._instances.indexOf(this);\n        if (index > -1) {\n          primitive._instances.splice(index, 1);\n        }\n      }\n      this._renderPrimitives = null;\n    }\n  }\n\n  _hitTestSelectableNode(ray) {\n    if (this._renderPrimitives) {\n      let localRay = null;\n      for (let primitive of this._renderPrimitives) {\n        if (primitive._min) {\n          if (!localRay) {\n            mat4.invert(tmpRayMatrix, this.worldMatrix);\n            mat4.multiply(tmpRayMatrix, tmpRayMatrix, ray.transformMatrix);\n            localRay = new Ray(tmpRayMatrix);\n          }\n          let intersection = localRay.intersectsAABB(primitive._min, primitive._max);\n          if (intersection) {\n            vec3.transformMat4(intersection, intersection, this.worldMatrix);\n            return intersection;\n          }\n        }\n      }\n    }\n    for (let child of this.children) {\n      let intersection = child._hitTestSelectableNode(ray);\n      if (intersection) {\n        return intersection;\n      }\n    }\n    return null;\n  }\n\n  hitTest(ray) {\n    if (this.selectable && this.visible) {\n      let intersection = this._hitTestSelectableNode(ray);\n\n      if (intersection) {\n        let origin = vec3.fromValues(ray.origin.x, ray.origin.y, ray.origin.z);\n        return {\n          node: this,\n          intersection: intersection,\n          distance: vec3.distance(origin, intersection),\n        };\n      }\n      return null;\n    }\n\n    let result = null;\n    for (let child of this.children) {\n      let childResult = child.hitTest(ray);\n      if (childResult) {\n        if (!result || result.distance > childResult.distance) {\n          result = childResult;\n        }\n      }\n    }\n    return result;\n  }\n\n  onSelect(value) {\n    this._selectHandler = value;\n  }\n\n  get selectHandler() {\n    return this._selectHandler;\n  }\n\n  // Called when a selectable node is selected.\n  handleSelect() {\n    if (this._selectHandler) {\n      this._selectHandler();\n    }\n  }\n\n  // Called when a selectable element is pointed at.\n  onHoverStart() {\n\n  }\n\n  // Called when a selectable element is no longer pointed at.\n  onHoverEnd() {\n\n  }\n\n  _update(timestamp, frameDelta) {\n    this.onUpdate(timestamp, frameDelta);\n\n    for (let child of this.children) {\n      child._update(timestamp, frameDelta);\n    }\n  }\n\n  // Called every frame so that the nodes can animate themselves\n  onUpdate(timestamp, frameDelta) {\n\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {vec3} from '../math/gl-matrix.js';\n\nexport class PrimitiveAttribute {\n  constructor(name, buffer, componentCount, componentType, stride, byteOffset) {\n    this.name = name;\n    this.buffer = buffer;\n    this.componentCount = componentCount || 3;\n    this.componentType = componentType || 5126; // gl.FLOAT;\n    this.stride = stride || 0;\n    this.byteOffset = byteOffset || 0;\n    this.normalized = false;\n  }\n}\n\nexport class Primitive {\n  constructor(attributes, elementCount, mode) {\n    this.attributes = attributes || [];\n    this.elementCount = elementCount || 0;\n    this.mode = mode || 4; // gl.TRIANGLES;\n    this.indexBuffer = null;\n    this.indexByteOffset = 0;\n    this.indexType = 0;\n    this._min = null;\n    this._max = null;\n  }\n\n  setIndexBuffer(indexBuffer, byteOffset, indexType) {\n    this.indexBuffer = indexBuffer;\n    this.indexByteOffset = byteOffset || 0;\n    this.indexType = indexType || 5123; // gl.UNSIGNED_SHORT;\n  }\n\n  setBounds(min, max) {\n    this._min = vec3.clone(min);\n    this._max = vec3.clone(max);\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nexport class Program {\n  constructor(gl, vertSrc, fragSrc, attribMap, defines) {\n    this._gl = gl;\n    this.program = gl.createProgram();\n    this.attrib = null;\n    this.uniform = null;\n    this.defines = {};\n\n    this._firstUse = true;\n    this._nextUseCallbacks = [];\n\n    let definesString = '';\n    if (defines) {\n      for (let define in defines) {\n        this.defines[define] = defines[define];\n        definesString += `#define ${define} ${defines[define]}\\n`;\n      }\n    }\n\n    this._vertShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.attachShader(this.program, this._vertShader);\n    gl.shaderSource(this._vertShader, definesString + vertSrc);\n    gl.compileShader(this._vertShader);\n\n    this._fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.attachShader(this.program, this._fragShader);\n    gl.shaderSource(this._fragShader, definesString + fragSrc);\n    gl.compileShader(this._fragShader);\n\n    if (attribMap) {\n      this.attrib = {};\n      for (let attribName in attribMap) {\n        gl.bindAttribLocation(this.program, attribMap[attribName], attribName);\n        this.attrib[attribName] = attribMap[attribName];\n      }\n    }\n\n    gl.linkProgram(this.program);\n  }\n\n  onNextUse(callback) {\n    this._nextUseCallbacks.push(callback);\n  }\n\n  use() {\n    let gl = this._gl;\n\n    // If this is the first time the program has been used do all the error checking and\n    // attrib/uniform querying needed.\n    if (this._firstUse) {\n      this._firstUse = false;\n      if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n        if (!gl.getShaderParameter(this._vertShader, gl.COMPILE_STATUS)) {\n          console.error('Vertex shader compile error: ' + gl.getShaderInfoLog(this._vertShader));\n        } else if (!gl.getShaderParameter(this._fragShader, gl.COMPILE_STATUS)) {\n          console.error('Fragment shader compile error: ' + gl.getShaderInfoLog(this._fragShader));\n        } else {\n          console.error('Program link error: ' + gl.getProgramInfoLog(this.program));\n        }\n        gl.deleteProgram(this.program);\n        this.program = null;\n      } else {\n        if (!this.attrib) {\n          this.attrib = {};\n          let attribCount = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n          for (let i = 0; i < attribCount; i++) {\n            let attribInfo = gl.getActiveAttrib(this.program, i);\n            this.attrib[attribInfo.name] = gl.getAttribLocation(this.program, attribInfo.name);\n          }\n        }\n\n        this.uniform = {};\n        let uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        let uniformName = '';\n        for (let i = 0; i < uniformCount; i++) {\n          let uniformInfo = gl.getActiveUniform(this.program, i);\n          uniformName = uniformInfo.name.replace('[0]', '');\n          this.uniform[uniformName] = gl.getUniformLocation(this.program, uniformName);\n        }\n      }\n      gl.deleteShader(this._vertShader);\n      gl.deleteShader(this._fragShader);\n    }\n\n    gl.useProgram(this.program);\n\n    if (this._nextUseCallbacks.length) {\n      for (let callback of this._nextUseCallbacks) {\n        callback(this);\n      }\n      this._nextUseCallbacks = [];\n    }\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {CAP, MAT_STATE, RENDER_ORDER, stateToBlendFunc} from './material.js';\nimport {Node} from './node.js';\nimport {Program} from './program.js';\nimport {DataTexture, VideoTexture} from './texture.js';\nimport {mat4, vec3} from '../math/gl-matrix.js';\n\nexport const ATTRIB = {\n  POSITION: 1,\n  NORMAL: 2,\n  TANGENT: 3,\n  TEXCOORD_0: 4,\n  TEXCOORD_1: 5,\n  COLOR_0: 6,\n};\n\nexport const ATTRIB_MASK = {\n  POSITION: 0x0001,\n  NORMAL: 0x0002,\n  TANGENT: 0x0004,\n  TEXCOORD_0: 0x0008,\n  TEXCOORD_1: 0x0010,\n  COLOR_0: 0x0020,\n};\n\nconst GL = WebGLRenderingContext; // For enums\n\nconst DEF_LIGHT_DIR = new Float32Array([-0.1, -1.0, -0.2]);\nconst DEF_LIGHT_COLOR = new Float32Array([3.0, 3.0, 3.0]);\n\nconst PRECISION_REGEX = new RegExp('precision (lowp|mediump|highp) float;');\n\nconst VERTEX_SHADER_SINGLE_ENTRY = `\nuniform mat4 PROJECTION_MATRIX, VIEW_MATRIX, MODEL_MATRIX;\n\nvoid main() {\n  gl_Position = vertex_main(PROJECTION_MATRIX, VIEW_MATRIX, MODEL_MATRIX);\n}\n`;\n\nconst VERTEX_SHADER_MULTI_ENTRY = `\n#ERROR Multiview rendering is not implemented\nvoid main() {\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT_SHADER_ENTRY = `\nvoid main() {\n  gl_FragColor = fragment_main();\n}\n`;\n\nfunction isPowerOfTwo(n) {\n  return (n & (n - 1)) === 0;\n}\n\n// Creates a WebGL context and initializes it with some common default state.\nexport function createWebGLContext(glAttribs) {\n  glAttribs = glAttribs || {alpha: false};\n\n  let webglCanvas = document.createElement('canvas');\n  let contextTypes = glAttribs.webgl2 ? ['webgl2'] : ['webgl', 'experimental-webgl'];\n  let context = null;\n\n  for (let contextType of contextTypes) {\n    context = webglCanvas.getContext(contextType, glAttribs);\n    if (context) {\n      break;\n    }\n  }\n\n  if (!context) {\n    let webglType = (glAttribs.webgl2 ? 'WebGL 2' : 'WebGL');\n    console.error('This browser does not support ' + webglType + '.');\n    return null;\n  }\n\n  return context;\n}\n\nexport class RenderView {\n  constructor(projectionMatrix, viewMatrix, viewport = null, eye = 'left') {\n    this.projectionMatrix = projectionMatrix;\n    this.viewMatrix = viewMatrix;\n    this.viewport = viewport;\n    // If an eye isn't given the left eye is assumed.\n    this._eye = eye;\n    this._eyeIndex = (eye == 'left' ? 0 : 1);\n  }\n\n  get eye() {\n    return this._eye;\n  }\n\n  set eye(value) {\n    this._eye = value;\n    this._eyeIndex = (value == 'left' ? 0 : 1);\n  }\n\n  get eyeIndex() {\n    return this._eyeIndex;\n  }\n}\n\nclass RenderBuffer {\n  constructor(target, usage, buffer, length = 0) {\n    this._target = target;\n    this._usage = usage;\n    this._length = length;\n    if (buffer instanceof Promise) {\n      this._buffer = null;\n      this._promise = buffer.then((buffer) => {\n        this._buffer = buffer;\n        return this;\n      });\n    } else {\n      this._buffer = buffer;\n      this._promise = Promise.resolve(this);\n    }\n  }\n\n  waitForComplete() {\n    return this._promise;\n  }\n}\n\nclass RenderPrimitiveAttribute {\n  constructor(primitiveAttribute) {\n    this._attrib_index = ATTRIB[primitiveAttribute.name];\n    this._componentCount = primitiveAttribute.componentCount;\n    this._componentType = primitiveAttribute.componentType;\n    this._stride = primitiveAttribute.stride;\n    this._byteOffset = primitiveAttribute.byteOffset;\n    this._normalized = primitiveAttribute.normalized;\n  }\n}\n\nclass RenderPrimitiveAttributeBuffer {\n  constructor(buffer) {\n    this._buffer = buffer;\n    this._attributes = [];\n  }\n}\n\nclass RenderPrimitive {\n  constructor(primitive) {\n    this._activeFrameId = 0;\n    this._instances = [];\n    this._material = null;\n\n    this.setPrimitive(primitive);\n  }\n\n  setPrimitive(primitive) {\n    this._mode = primitive.mode;\n    this._elementCount = primitive.elementCount;\n    this._promise = null;\n    this._vao = null;\n    this._complete = false;\n    this._attributeBuffers = [];\n    this._attributeMask = 0;\n\n    for (let attribute of primitive.attributes) {\n      this._attributeMask |= ATTRIB_MASK[attribute.name];\n      let renderAttribute = new RenderPrimitiveAttribute(attribute);\n      let foundBuffer = false;\n      for (let attributeBuffer of this._attributeBuffers) {\n        if (attributeBuffer._buffer == attribute.buffer) {\n          attributeBuffer._attributes.push(renderAttribute);\n          foundBuffer = true;\n          break;\n        }\n      }\n      if (!foundBuffer) {\n        let attributeBuffer = new RenderPrimitiveAttributeBuffer(attribute.buffer);\n        attributeBuffer._attributes.push(renderAttribute);\n        this._attributeBuffers.push(attributeBuffer);\n      }\n    }\n\n    this._indexBuffer = null;\n    this._indexByteOffset = 0;\n    this._indexType = 0;\n\n    if (primitive.indexBuffer) {\n      this._indexByteOffset = primitive.indexByteOffset;\n      this._indexType = primitive.indexType;\n      this._indexBuffer = primitive.indexBuffer;\n    }\n\n    if (primitive._min) {\n      this._min = vec3.clone(primitive._min);\n      this._max = vec3.clone(primitive._max);\n    } else {\n      this._min = null;\n      this._max = null;\n    }\n\n    if (this._material != null) {\n      this.waitForComplete(); // To flip the _complete flag.\n    }\n  }\n\n  setRenderMaterial(material) {\n    this._material = material;\n    this._promise = null;\n    this._complete = false;\n\n    if (this._material != null) {\n      this.waitForComplete(); // To flip the _complete flag.\n    }\n  }\n\n  markActive(frameId) {\n    if (this._complete && this._activeFrameId != frameId) {\n      if (this._material) {\n        if (!this._material.markActive(frameId)) {\n          return;\n        }\n      }\n      this._activeFrameId = frameId;\n    }\n  }\n\n  get samplers() {\n    return this._material._samplerDictionary;\n  }\n\n  get uniforms() {\n    return this._material._uniform_dictionary;\n  }\n\n  waitForComplete() {\n    if (!this._promise) {\n      if (!this._material) {\n        return Promise.reject('RenderPrimitive does not have a material');\n      }\n\n      let completionPromises = [];\n\n      for (let attributeBuffer of this._attributeBuffers) {\n        if (!attributeBuffer._buffer._buffer) {\n          completionPromises.push(attributeBuffer._buffer._promise);\n        }\n      }\n\n      if (this._indexBuffer && !this._indexBuffer._buffer) {\n        completionPromises.push(this._indexBuffer._promise);\n      }\n\n      this._promise = Promise.all(completionPromises).then(() => {\n        this._complete = true;\n        return this;\n      });\n    }\n    return this._promise;\n  }\n}\n\nexport class RenderTexture {\n  constructor(texture) {\n    this._texture = texture;\n    this._complete = false;\n    this._activeFrameId = 0;\n    this._activeCallback = null;\n  }\n\n  markActive(frameId) {\n    if (this._activeCallback && this._activeFrameId != frameId) {\n      this._activeFrameId = frameId;\n      this._activeCallback(this);\n    }\n  }\n}\n\nconst inverseMatrix = mat4.create();\n\nfunction setCap(gl, glEnum, cap, prevState, state) {\n  let change = (state & cap) - (prevState & cap);\n  if (!change) {\n    return;\n  }\n\n  if (change > 0) {\n    gl.enable(glEnum);\n  } else {\n    gl.disable(glEnum);\n  }\n}\n\nclass RenderMaterialSampler {\n  constructor(renderer, materialSampler, index) {\n    this._renderer = renderer;\n    this._uniformName = materialSampler._uniformName;\n    this._renderTexture = renderer._getRenderTexture(materialSampler._texture);\n    this._index = index;\n  }\n\n  set texture(value) {\n    this._renderTexture = this._renderer._getRenderTexture(value);\n  }\n}\n\nclass RenderMaterialUniform {\n  constructor(materialUniform) {\n    this._uniformName = materialUniform._uniformName;\n    this._uniform = null;\n    this._length = materialUniform._length;\n    if (materialUniform._value instanceof Array) {\n      this._value = new Float32Array(materialUniform._value);\n    } else {\n      this._value = new Float32Array([materialUniform._value]);\n    }\n  }\n\n  set value(value) {\n    if (this._value.length == 1) {\n      this._value[0] = value;\n    } else {\n      for (let i = 0; i < this._value.length; ++i) {\n        this._value[i] = value[i];\n      }\n    }\n  }\n}\n\nclass RenderMaterial {\n  constructor(renderer, material, program) {\n    this._program = program;\n    this._state = material.state._state;\n    this._activeFrameId = 0;\n    this._completeForActiveFrame = false;\n\n    this._samplerDictionary = {};\n    this._samplers = [];\n    for (let i = 0; i < material._samplers.length; ++i) {\n      let renderSampler = new RenderMaterialSampler(renderer, material._samplers[i], i);\n      this._samplers.push(renderSampler);\n      this._samplerDictionary[renderSampler._uniformName] = renderSampler;\n    }\n\n    this._uniform_dictionary = {};\n    this._uniforms = [];\n    for (let uniform of material._uniforms) {\n      let renderUniform = new RenderMaterialUniform(uniform);\n      this._uniforms.push(renderUniform);\n      this._uniform_dictionary[renderUniform._uniformName] = renderUniform;\n    }\n\n    this._firstBind = true;\n\n    this._renderOrder = material.renderOrder;\n    if (this._renderOrder == RENDER_ORDER.DEFAULT) {\n      if (this._state & CAP.BLEND) {\n        this._renderOrder = RENDER_ORDER.TRANSPARENT;\n      } else {\n        this._renderOrder = RENDER_ORDER.OPAQUE;\n      }\n    }\n  }\n\n  bind(gl) {\n    // First time we do a binding, cache the uniform locations and remove\n    // unused uniforms from the list.\n    if (this._firstBind) {\n      for (let i = 0; i < this._samplers.length;) {\n        let sampler = this._samplers[i];\n        if (!this._program.uniform[sampler._uniformName]) {\n          this._samplers.splice(i, 1);\n          continue;\n        }\n        ++i;\n      }\n\n      for (let i = 0; i < this._uniforms.length;) {\n        let uniform = this._uniforms[i];\n        uniform._uniform = this._program.uniform[uniform._uniformName];\n        if (!uniform._uniform) {\n          this._uniforms.splice(i, 1);\n          continue;\n        }\n        ++i;\n      }\n      this._firstBind = false;\n    }\n\n    for (let sampler of this._samplers) {\n      gl.activeTexture(gl.TEXTURE0 + sampler._index);\n      if (sampler._renderTexture && sampler._renderTexture._complete) {\n        gl.bindTexture(gl.TEXTURE_2D, sampler._renderTexture._texture);\n      } else {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n      }\n    }\n\n    for (let uniform of this._uniforms) {\n      switch (uniform._length) {\n        case 1: gl.uniform1fv(uniform._uniform, uniform._value); break;\n        case 2: gl.uniform2fv(uniform._uniform, uniform._value); break;\n        case 3: gl.uniform3fv(uniform._uniform, uniform._value); break;\n        case 4: gl.uniform4fv(uniform._uniform, uniform._value); break;\n      }\n    }\n  }\n\n  markActive(frameId) {\n    if (this._activeFrameId != frameId) {\n      this._activeFrameId = frameId;\n      this._completeForActiveFrame = true;\n      for (let i = 0; i < this._samplers.length; ++i) {\n        let sampler = this._samplers[i];\n        if (sampler._renderTexture) {\n          if (!sampler._renderTexture._complete) {\n            this._completeForActiveFrame = false;\n            break;\n          }\n          sampler._renderTexture.markActive(frameId);\n        }\n      }\n    }\n    return this._completeForActiveFrame;\n  }\n\n  // Material State fetchers\n  get cullFace() {\n    return !!(this._state & CAP.CULL_FACE);\n  }\n  get blend() {\n    return !!(this._state & CAP.BLEND);\n  }\n  get depthTest() {\n    return !!(this._state & CAP.DEPTH_TEST);\n  }\n  get stencilTest() {\n    return !!(this._state & CAP.STENCIL_TEST);\n  }\n  get colorMask() {\n    return !!(this._state & CAP.COLOR_MASK);\n  }\n  get depthMask() {\n    return !!(this._state & CAP.DEPTH_MASK);\n  }\n  get stencilMask() {\n    return !!(this._state & CAP.STENCIL_MASK);\n  }\n  get depthFunc() {\n    return ((this._state & MAT_STATE.DEPTH_FUNC_RANGE) >> MAT_STATE.DEPTH_FUNC_SHIFT) + GL.NEVER;\n  }\n  get blendFuncSrc() {\n    return stateToBlendFunc(this._state, MAT_STATE.BLEND_SRC_RANGE, MAT_STATE.BLEND_SRC_SHIFT);\n  }\n  get blendFuncDst() {\n    return stateToBlendFunc(this._state, MAT_STATE.BLEND_DST_RANGE, MAT_STATE.BLEND_DST_SHIFT);\n  }\n\n  // Only really for use from the renderer\n  _capsDiff(otherState) {\n    return (otherState & MAT_STATE.CAPS_RANGE) ^ (this._state & MAT_STATE.CAPS_RANGE);\n  }\n\n  _blendDiff(otherState) {\n    if (!(this._state & CAP.BLEND)) {\n      return 0;\n    }\n    return (otherState & MAT_STATE.BLEND_FUNC_RANGE) ^ (this._state & MAT_STATE.BLEND_FUNC_RANGE);\n  }\n\n  _depthFuncDiff(otherState) {\n    if (!(this._state & CAP.DEPTH_TEST)) {\n      return 0;\n    }\n    return (otherState & MAT_STATE.DEPTH_FUNC_RANGE) ^ (this._state & MAT_STATE.DEPTH_FUNC_RANGE);\n  }\n}\n\nexport class Renderer {\n  constructor(gl) {\n    this._gl = gl || createWebGLContext();\n    this._frameId = 0;\n    this._programCache = {};\n    this._textureCache = {};\n    this._renderPrimitives = Array(RENDER_ORDER.DEFAULT);\n    this._cameraPositions = [];\n\n    this._vaoExt = gl.getExtension('OES_vertex_array_object');\n\n    let fragHighPrecision = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n    this._defaultFragPrecision = fragHighPrecision.precision > 0 ? 'highp' : 'mediump';\n\n    this._depthMaskNeedsReset = false;\n    this._colorMaskNeedsReset = false;\n\n    this._globalLightColor = vec3.clone(DEF_LIGHT_COLOR);\n    this._globalLightDir = vec3.clone(DEF_LIGHT_DIR);\n  }\n\n  get gl() {\n    return this._gl;\n  }\n\n  set globalLightColor(value) {\n    vec3.copy(this._globalLightColor, value);\n  }\n\n  get globalLightColor() {\n    return vec3.clone(this._globalLightColor);\n  }\n\n  set globalLightDir(value) {\n    vec3.copy(this._globalLightDir, value);\n  }\n\n  get globalLightDir() {\n    return vec3.clone(this._globalLightDir);\n  }\n\n  createRenderBuffer(target, data, usage = GL.STATIC_DRAW) {\n    let gl = this._gl;\n    let glBuffer = gl.createBuffer();\n\n    if (data instanceof Promise) {\n      let renderBuffer = new RenderBuffer(target, usage, data.then((data) => {\n        gl.bindBuffer(target, glBuffer);\n        gl.bufferData(target, data, usage);\n        renderBuffer._length = data.byteLength;\n        return glBuffer;\n      }));\n      return renderBuffer;\n    } else {\n      gl.bindBuffer(target, glBuffer);\n      gl.bufferData(target, data, usage);\n      return new RenderBuffer(target, usage, glBuffer, data.byteLength);\n    }\n  }\n\n  updateRenderBuffer(buffer, data, offset = 0) {\n    if (buffer._buffer) {\n      let gl = this._gl;\n      gl.bindBuffer(buffer._target, buffer._buffer);\n      if (offset == 0 && buffer._length == data.byteLength) {\n        gl.bufferData(buffer._target, data, buffer._usage);\n      } else {\n        gl.bufferSubData(buffer._target, offset, data);\n      }\n    } else {\n      buffer.waitForComplete().then((buffer) => {\n        this.updateRenderBuffer(buffer, data, offset);\n      });\n    }\n  }\n\n  createRenderPrimitive(primitive, material) {\n    let renderPrimitive = new RenderPrimitive(primitive);\n\n    let program = this._getMaterialProgram(material, renderPrimitive);\n    let renderMaterial = new RenderMaterial(this, material, program);\n    renderPrimitive.setRenderMaterial(renderMaterial);\n\n    if (!this._renderPrimitives[renderMaterial._renderOrder]) {\n      this._renderPrimitives[renderMaterial._renderOrder] = [];\n    }\n\n    this._renderPrimitives[renderMaterial._renderOrder].push(renderPrimitive);\n\n    return renderPrimitive;\n  }\n\n  createMesh(primitive, material) {\n    let meshNode = new Node();\n    meshNode.addRenderPrimitive(this.createRenderPrimitive(primitive, material));\n    return meshNode;\n  }\n\n  drawViews(views, rootNode) {\n    if (!rootNode) {\n      return;\n    }\n\n    let gl = this._gl;\n    this._frameId++;\n\n    rootNode.markActive(this._frameId);\n\n    // If there's only one view then flip the algorithm a bit so that we're only\n    // setting the viewport once.\n    if (views.length == 1 && views[0].viewport) {\n      let vp = views[0].viewport;\n      this._gl.viewport(vp.x, vp.y, vp.width, vp.height);\n    }\n\n    // Get the positions of the 'camera' for each view matrix.\n    for (let i = 0; i < views.length; ++i) {\n      mat4.invert(inverseMatrix, views[i].viewMatrix);\n\n      if (this._cameraPositions.length <= i) {\n        this._cameraPositions.push(vec3.create());\n      }\n      let cameraPosition = this._cameraPositions[i];\n      vec3.set(cameraPosition, 0, 0, 0);\n      vec3.transformMat4(cameraPosition, cameraPosition, inverseMatrix);\n    }\n\n    // Draw each set of render primitives in order\n    for (let renderPrimitives of this._renderPrimitives) {\n      if (renderPrimitives && renderPrimitives.length) {\n        this._drawRenderPrimitiveSet(views, renderPrimitives);\n      }\n    }\n\n    if (this._vaoExt) {\n      this._vaoExt.bindVertexArrayOES(null);\n    }\n\n    if (this._depthMaskNeedsReset) {\n      gl.depthMask(true);\n    }\n    if (this._colorMaskNeedsReset) {\n      gl.colorMask(true, true, true, true);\n    }\n  }\n\n  _drawRenderPrimitiveSet(views, renderPrimitives) {\n    let gl = this._gl;\n    let program = null;\n    let material = null;\n    let attribMask = 0;\n\n    // Loop through every primitive known to the renderer.\n    for (let primitive of renderPrimitives) {\n      // Skip over those that haven't been marked as active for this frame.\n      if (primitive._activeFrameId != this._frameId) {\n        continue;\n      }\n\n      // Bind the primitive material's program if it's different than the one we\n      // were using for the previous primitive.\n      // TODO: The ording of this could be more efficient.\n      if (program != primitive._material._program) {\n        program = primitive._material._program;\n        program.use();\n\n        if (program.uniform.LIGHT_DIRECTION) {\n          gl.uniform3fv(program.uniform.LIGHT_DIRECTION, this._globalLightDir);\n        }\n\n        if (program.uniform.LIGHT_COLOR) {\n          gl.uniform3fv(program.uniform.LIGHT_COLOR, this._globalLightColor);\n        }\n\n        if (views.length == 1) {\n          gl.uniformMatrix4fv(program.uniform.PROJECTION_MATRIX, false, views[0].projectionMatrix);\n          gl.uniformMatrix4fv(program.uniform.VIEW_MATRIX, false, views[0].viewMatrix);\n          gl.uniform3fv(program.uniform.CAMERA_POSITION, this._cameraPositions[0]);\n          gl.uniform1i(program.uniform.EYE_INDEX, views[0].eyeIndex);\n        }\n      }\n\n      if (material != primitive._material) {\n        this._bindMaterialState(primitive._material, material);\n        primitive._material.bind(gl, program, material);\n        material = primitive._material;\n      }\n\n      if (this._vaoExt) {\n        if (primitive._vao) {\n          this._vaoExt.bindVertexArrayOES(primitive._vao);\n        } else {\n          primitive._vao = this._vaoExt.createVertexArrayOES();\n          this._vaoExt.bindVertexArrayOES(primitive._vao);\n          this._bindPrimitive(primitive);\n        }\n      } else {\n        this._bindPrimitive(primitive, attribMask);\n        attribMask = primitive._attributeMask;\n      }\n\n      for (let i = 0; i < views.length; ++i) {\n        let view = views[i];\n        if (views.length > 1) {\n          if (view.viewport) {\n            let vp = view.viewport;\n            gl.viewport(vp.x, vp.y, vp.width, vp.height);\n          }\n          gl.uniformMatrix4fv(program.uniform.PROJECTION_MATRIX, false, view.projectionMatrix);\n          gl.uniformMatrix4fv(program.uniform.VIEW_MATRIX, false, view.viewMatrix);\n          gl.uniform3fv(program.uniform.CAMERA_POSITION, this._cameraPositions[i]);\n          gl.uniform1i(program.uniform.EYE_INDEX, view.eyeIndex);\n        }\n\n        for (let instance of primitive._instances) {\n          if (instance._activeFrameId != this._frameId) {\n            continue;\n          }\n\n          gl.uniformMatrix4fv(program.uniform.MODEL_MATRIX, false, instance.worldMatrix);\n\n          if (primitive._indexBuffer) {\n            gl.drawElements(primitive._mode, primitive._elementCount,\n                primitive._indexType, primitive._indexByteOffset);\n          } else {\n            gl.drawArrays(primitive._mode, 0, primitive._elementCount);\n          }\n        }\n      }\n    }\n  }\n\n  _getRenderTexture(texture) {\n    if (!texture) {\n      return null;\n    }\n\n    let key = texture.textureKey;\n    if (!key) {\n      throw new Error('Texure does not have a valid key');\n    }\n\n    if (key in this._textureCache) {\n      return this._textureCache[key];\n    } else {\n      let gl = this._gl;\n      let textureHandle = gl.createTexture();\n\n      let renderTexture = new RenderTexture(textureHandle);\n      this._textureCache[key] = renderTexture;\n\n      if (texture instanceof DataTexture) {\n        gl.bindTexture(gl.TEXTURE_2D, textureHandle);\n        gl.texImage2D(gl.TEXTURE_2D, 0, texture.format, texture.width, texture.height,\n                                     0, texture.format, texture._type, texture._data);\n        this._setSamplerParameters(texture);\n        renderTexture._complete = true;\n      } else {\n        texture.waitForComplete().then(() => {\n          gl.bindTexture(gl.TEXTURE_2D, textureHandle);\n          gl.texImage2D(gl.TEXTURE_2D, 0, texture.format, texture.format, gl.UNSIGNED_BYTE, texture.source);\n          this._setSamplerParameters(texture);\n          renderTexture._complete = true;\n\n          if (texture instanceof VideoTexture) {\n            // Once the video starts playing, set a callback to update it's\n            // contents each frame.\n            texture._video.addEventListener('playing', () => {\n              renderTexture._activeCallback = () => {\n                if (!texture._video.paused && !texture._video.waiting) {\n                  gl.bindTexture(gl.TEXTURE_2D, textureHandle);\n                  gl.texImage2D(gl.TEXTURE_2D, 0, texture.format, texture.format, gl.UNSIGNED_BYTE, texture.source);\n                }\n              };\n            });\n          }\n        });\n      }\n\n      return renderTexture;\n    }\n  }\n\n  _setSamplerParameters(texture) {\n    let gl = this._gl;\n\n    let sampler = texture.sampler;\n    let powerOfTwo = isPowerOfTwo(texture.width) && isPowerOfTwo(texture.height);\n    let mipmap = powerOfTwo && texture.mipmap;\n    if (mipmap) {\n      gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    let minFilter = sampler.minFilter || (mipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n    let wrapS = sampler.wrapS || (powerOfTwo ? gl.REPEAT : gl.CLAMP_TO_EDGE);\n    let wrapT = sampler.wrapT || (powerOfTwo ? gl.REPEAT : gl.CLAMP_TO_EDGE);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, sampler.magFilter || gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n  }\n\n  _getProgramKey(name, defines) {\n    let key = `${name}:`;\n\n    for (let define in defines) {\n      key += `${define}=${defines[define]},`;\n    }\n\n    return key;\n  }\n\n  _getMaterialProgram(material, renderPrimitive) {\n    let materialName = material.materialName;\n    let vertexSource = material.vertexSource;\n    let fragmentSource = material.fragmentSource;\n\n    // These should always be defined for every material\n    if (materialName == null) {\n      throw new Error('Material does not have a name');\n    }\n    if (vertexSource == null) {\n      throw new Error(`Material \"${materialName}\" does not have a vertex source`);\n    }\n    if (fragmentSource == null) {\n      throw new Error(`Material \"${materialName}\" does not have a fragment source`);\n    }\n\n    let defines = material.getProgramDefines(renderPrimitive);\n    let key = this._getProgramKey(materialName, defines);\n\n    if (key in this._programCache) {\n      return this._programCache[key];\n    } else {\n      let multiview = false; // Handle this dynamically later\n      let fullVertexSource = vertexSource;\n      fullVertexSource += multiview ? VERTEX_SHADER_MULTI_ENTRY :\n                                      VERTEX_SHADER_SINGLE_ENTRY;\n\n      let precisionMatch = fragmentSource.match(PRECISION_REGEX);\n      let fragPrecisionHeader = precisionMatch ? '' : `precision ${this._defaultFragPrecision} float;\\n`;\n\n      let fullFragmentSource = fragPrecisionHeader + fragmentSource;\n      fullFragmentSource += FRAGMENT_SHADER_ENTRY;\n\n      let program = new Program(this._gl, fullVertexSource, fullFragmentSource, ATTRIB, defines);\n      this._programCache[key] = program;\n\n      program.onNextUse((program) => {\n        // Bind the samplers to the right texture index. This is constant for\n        // the lifetime of the program.\n        for (let i = 0; i < material._samplers.length; ++i) {\n          let sampler = material._samplers[i];\n          let uniform = program.uniform[sampler._uniformName];\n          if (uniform) {\n            this._gl.uniform1i(uniform, i);\n          }\n        }\n      });\n\n      return program;\n    }\n  }\n\n  _bindPrimitive(primitive, attribMask) {\n    let gl = this._gl;\n\n    // If the active attributes have changed then update the active set.\n    if (attribMask != primitive._attributeMask) {\n      for (let attrib in ATTRIB) {\n        if (primitive._attributeMask & ATTRIB_MASK[attrib]) {\n          gl.enableVertexAttribArray(ATTRIB[attrib]);\n        } else {\n          gl.disableVertexAttribArray(ATTRIB[attrib]);\n        }\n      }\n    }\n\n    // Bind the primitive attributes and indices.\n    for (let attributeBuffer of primitive._attributeBuffers) {\n      gl.bindBuffer(gl.ARRAY_BUFFER, attributeBuffer._buffer._buffer);\n      for (let attrib of attributeBuffer._attributes) {\n        gl.vertexAttribPointer(\n            attrib._attrib_index, attrib._componentCount, attrib._componentType,\n            attrib._normalized, attrib._stride, attrib._byteOffset);\n      }\n    }\n\n    if (primitive._indexBuffer) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, primitive._indexBuffer._buffer);\n    } else {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    }\n  }\n\n  _bindMaterialState(material, prevMaterial = null) {\n    let gl = this._gl;\n\n    let state = material._state;\n    let prevState = prevMaterial ? prevMaterial._state : ~state;\n\n    // Return early if both materials use identical state\n    if (state == prevState) {\n      return;\n    }\n\n    // Any caps bits changed?\n    if (material._capsDiff(prevState)) {\n      setCap(gl, gl.CULL_FACE, CAP.CULL_FACE, prevState, state);\n      setCap(gl, gl.BLEND, CAP.BLEND, prevState, state);\n      setCap(gl, gl.DEPTH_TEST, CAP.DEPTH_TEST, prevState, state);\n      setCap(gl, gl.STENCIL_TEST, CAP.STENCIL_TEST, prevState, state);\n\n      let colorMaskChange = (state & CAP.COLOR_MASK) - (prevState & CAP.COLOR_MASK);\n      if (colorMaskChange) {\n        let mask = colorMaskChange > 1;\n        this._colorMaskNeedsReset = !mask;\n        gl.colorMask(mask, mask, mask, mask);\n      }\n\n      let depthMaskChange = (state & CAP.DEPTH_MASK) - (prevState & CAP.DEPTH_MASK);\n      if (depthMaskChange) {\n        this._depthMaskNeedsReset = !(depthMaskChange > 1);\n        gl.depthMask(depthMaskChange > 1);\n      }\n\n      let stencilMaskChange = (state & CAP.STENCIL_MASK) - (prevState & CAP.STENCIL_MASK);\n      if (stencilMaskChange) {\n        gl.stencilMask(stencilMaskChange > 1);\n      }\n    }\n\n    // Blending enabled and blend func changed?\n    if (material._blendDiff(prevState)) {\n      gl.blendFunc(material.blendFuncSrc, material.blendFuncDst);\n    }\n\n    // Depth testing enabled and depth func changed?\n    if (material._depthFuncDiff(prevState)) {\n      gl.depthFunc(material.depthFunc);\n    }\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nconst GL = WebGLRenderingContext; // For enums\n\nexport class TextureSampler {\n  constructor() {\n    this.minFilter = null;\n    this.magFilter = null;\n    this.wrapS = null;\n    this.wrapT = null;\n  }\n}\n\nexport class Texture {\n  constructor() {\n    this.sampler = new TextureSampler();\n    this.mipmap = true;\n    // TODO: Anisotropy\n  }\n\n  get format() {\n    return GL.RGBA;\n  }\n\n  get width() {\n    return 0;\n  }\n\n  get height() {\n    return 0;\n  }\n\n  get textureKey() {\n    return null;\n  }\n}\n\nexport class ImageTexture extends Texture {\n  constructor(img) {\n    super();\n\n    this._img = img;\n    this._imgBitmap = null;\n\n    if (img.src && img.complete) {\n      if (img.naturalWidth) {\n        this._promise = this._finishImage();\n      } else {\n        this._promise = Promise.reject('Image provided had failed to load.');\n      }\n    } else {\n      this._promise = new Promise((resolve, reject) => {\n        img.addEventListener('load', () => resolve(this._finishImage()));\n        img.addEventListener('error', reject);\n      });\n    }\n  }\n\n  _finishImage() {\n    if (window.createImageBitmap) {\n      return window.createImageBitmap(this._img).then((imgBitmap) => {\n        this._imgBitmap = imgBitmap;\n        return Promise.resolve(this);\n      });\n    }\n    return Promise.resolve(this);\n  }\n\n  get format() {\n    // TODO: Can be RGB in some cases.\n    return GL.RGBA;\n  }\n\n  get width() {\n    return this._img.width;\n  }\n\n  get height() {\n    return this._img.height;\n  }\n\n  waitForComplete() {\n    return this._promise;\n  }\n\n  get textureKey() {\n    return this._img.src;\n  }\n\n  get source() {\n    return this._imgBitmap || this._img;\n  }\n}\n\nexport class UrlTexture extends ImageTexture {\n  constructor(url) {\n    let img = new Image();\n    super(img);\n    img.src = url;\n  }\n}\n\nexport class BlobTexture extends ImageTexture {\n  constructor(blob) {\n    let img = new Image();\n    super(img);\n    img.src = window.URL.createObjectURL(blob);\n  }\n}\n\nexport class VideoTexture extends Texture {\n  constructor(video) {\n    super();\n\n    this._video = video;\n\n    if (video.readyState >= 2) {\n      this._promise = Promise.resolve(this);\n    } else if (video.error) {\n      this._promise = Promise.reject(video.error);\n    } else {\n      this._promise = new Promise((resolve, reject) => {\n        video.addEventListener('loadeddata', () => resolve(this));\n        video.addEventListener('error', reject);\n      });\n    }\n  }\n\n  get format() {\n    // TODO: Can be RGB in some cases.\n    return GL.RGBA;\n  }\n\n  get width() {\n    return this._video.videoWidth;\n  }\n\n  get height() {\n    return this._video.videoHeight;\n  }\n\n  waitForComplete() {\n    return this._promise;\n  }\n\n  get textureKey() {\n    return this._video.src;\n  }\n\n  get source() {\n    return this._video;\n  }\n}\n\nlet nextDataTextureIndex = 0;\n\nexport class DataTexture extends Texture {\n  constructor(data, width, height, format = GL.RGBA, type = GL.UNSIGNED_BYTE) {\n    super();\n\n    this._data = data;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._type = type;\n    this._key = `DATA_${nextDataTextureIndex}`;\n    nextDataTextureIndex++;\n  }\n\n  get format() {\n    return this._format;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get textureKey() {\n    return this._key;\n  }\n}\n\nexport class ColorTexture extends DataTexture {\n  constructor(r, g, b, a) {\n    let colorData = new Uint8Array([r*255.0, g*255.0, b*255.0, a*255.0]);\n    super(colorData, 1, 1);\n\n    this.mipmap = false;\n    this._key = `COLOR_${colorData[0]}_${colorData[1]}_${colorData[2]}_${colorData[3]}`;\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nexport {Node} from './core/node.js';\nexport {Renderer, createWebGLContext} from './core/renderer.js';\nexport {UrlTexture} from './core/texture.js';\n\nexport {PrimitiveStream} from './geometry/primitive-stream.js';\nexport {BoxBuilder} from './geometry/box-builder.js';\n\nexport {PbrMaterial} from './materials/pbr.js';\n\nexport {mat4, mat3, vec3, vec4, quat} from './math/gl-matrix.js';\n\nexport {BoundsRenderer} from './nodes/bounds-renderer.js';\nexport {ButtonNode} from './nodes/button.js';\nexport {DropShadowNode} from './nodes/drop-shadow.js';\nexport {CubeSeaNode} from './nodes/cube-sea.js';\nexport {Gltf2Node} from './nodes/gltf2.js';\nexport {SkyboxNode} from './nodes/skybox.js';\nexport {VideoNode} from './nodes/video.js';\n\nexport {WebXRView, Scene} from './scenes/scene.js';\n\nexport {FallbackHelper} from './util/fallback-helper.js';\nexport {QueryArgs} from './util/query-args.js';\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {GeometryBuilderBase} from './primitive-stream.js';\n\nexport class BoxBuilder extends GeometryBuilderBase {\n  pushBox(min, max) {\n    let stream = this.primitiveStream;\n\n    let w = max[0] - min[0];\n    let h = max[1] - min[1];\n    let d = max[2] - min[2];\n\n    let wh = w * 0.5;\n    let hh = h * 0.5;\n    let dh = d * 0.5;\n\n    let cx = min[0] + wh;\n    let cy = min[1] + hh;\n    let cz = min[2] + dh;\n\n    stream.startGeometry();\n\n    // Bottom\n    let idx = stream.nextVertexIndex;\n    stream.pushTriangle(idx, idx+1, idx+2);\n    stream.pushTriangle(idx, idx+2, idx+3);\n\n    //                 X       Y       Z      U    V    NX    NY   NZ\n    stream.pushVertex(-wh+cx, -hh+cy, -dh+cz, 0.0, 1.0, 0.0, -1.0, 0.0);\n    stream.pushVertex(+wh+cx, -hh+cy, -dh+cz, 1.0, 1.0, 0.0, -1.0, 0.0);\n    stream.pushVertex(+wh+cx, -hh+cy, +dh+cz, 1.0, 0.0, 0.0, -1.0, 0.0);\n    stream.pushVertex(-wh+cx, -hh+cy, +dh+cz, 0.0, 0.0, 0.0, -1.0, 0.0);\n\n    // Top\n    idx = stream.nextVertexIndex;\n    stream.pushTriangle(idx, idx+2, idx+1);\n    stream.pushTriangle(idx, idx+3, idx+2);\n\n    stream.pushVertex(-wh+cx, +hh+cy, -dh+cz, 0.0, 0.0, 0.0, 1.0, 0.0);\n    stream.pushVertex(+wh+cx, +hh+cy, -dh+cz, 1.0, 0.0, 0.0, 1.0, 0.0);\n    stream.pushVertex(+wh+cx, +hh+cy, +dh+cz, 1.0, 1.0, 0.0, 1.0, 0.0);\n    stream.pushVertex(-wh+cx, +hh+cy, +dh+cz, 0.0, 1.0, 0.0, 1.0, 0.0);\n\n    // Left\n    idx = stream.nextVertexIndex;\n    stream.pushTriangle(idx, idx+2, idx+1);\n    stream.pushTriangle(idx, idx+3, idx+2);\n\n    stream.pushVertex(-wh+cx, -hh+cy, -dh+cz, 0.0, 1.0, -1.0, 0.0, 0.0);\n    stream.pushVertex(-wh+cx, +hh+cy, -dh+cz, 0.0, 0.0, -1.0, 0.0, 0.0);\n    stream.pushVertex(-wh+cx, +hh+cy, +dh+cz, 1.0, 0.0, -1.0, 0.0, 0.0);\n    stream.pushVertex(-wh+cx, -hh+cy, +dh+cz, 1.0, 1.0, -1.0, 0.0, 0.0);\n\n    // Right\n    idx = stream.nextVertexIndex;\n    stream.pushTriangle(idx, idx+1, idx+2);\n    stream.pushTriangle(idx, idx+2, idx+3);\n\n    stream.pushVertex(+wh+cx, -hh+cy, -dh+cz, 1.0, 1.0, 1.0, 0.0, 0.0);\n    stream.pushVertex(+wh+cx, +hh+cy, -dh+cz, 1.0, 0.0, 1.0, 0.0, 0.0);\n    stream.pushVertex(+wh+cx, +hh+cy, +dh+cz, 0.0, 0.0, 1.0, 0.0, 0.0);\n    stream.pushVertex(+wh+cx, -hh+cy, +dh+cz, 0.0, 1.0, 1.0, 0.0, 0.0);\n\n    // Back\n    idx = stream.nextVertexIndex;\n    stream.pushTriangle(idx, idx+2, idx+1);\n    stream.pushTriangle(idx, idx+3, idx+2);\n\n    stream.pushVertex(-wh+cx, -hh+cy, -dh+cz, 1.0, 1.0, 0.0, 0.0, -1.0);\n    stream.pushVertex(+wh+cx, -hh+cy, -dh+cz, 0.0, 1.0, 0.0, 0.0, -1.0);\n    stream.pushVertex(+wh+cx, +hh+cy, -dh+cz, 0.0, 0.0, 0.0, 0.0, -1.0);\n    stream.pushVertex(-wh+cx, +hh+cy, -dh+cz, 1.0, 0.0, 0.0, 0.0, -1.0);\n\n    // Front\n    idx = stream.nextVertexIndex;\n    stream.pushTriangle(idx, idx+1, idx+2);\n    stream.pushTriangle(idx, idx+2, idx+3);\n\n    stream.pushVertex(-wh+cx, -hh+cy, +dh+cz, 0.0, 1.0, 0.0, 0.0, 1.0);\n    stream.pushVertex(+wh+cx, -hh+cy, +dh+cz, 1.0, 1.0, 0.0, 0.0, 1.0);\n    stream.pushVertex(+wh+cx, +hh+cy, +dh+cz, 1.0, 0.0, 0.0, 0.0, 1.0);\n    stream.pushVertex(-wh+cx, +hh+cy, +dh+cz, 0.0, 0.0, 0.0, 0.0, 1.0);\n\n    stream.endGeometry();\n  }\n\n  pushCube(center = [0, 0, 0], size = 1.0) {\n    let hs = size * 0.5;\n    this.pushBox([center[0] - hs, center[1] - hs, center[2] - hs],\n                 [center[0] + hs, center[1] + hs, center[2] + hs]);\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {Primitive, PrimitiveAttribute} from '../core/primitive.js';\nimport {mat3, vec3} from '../math/gl-matrix.js';\n\nconst GL = WebGLRenderingContext; // For enums\n\nconst tempVec3 = vec3.create();\n\nexport class PrimitiveStream {\n  constructor(options) {\n    this._vertices = [];\n    this._indices = [];\n\n    this._geometryStarted = false;\n\n    this._vertexOffset = 0;\n    this._vertexIndex = 0;\n    this._highIndex = 0;\n\n    this._flipWinding = false;\n    this._invertNormals = false;\n    this._transform = null;\n    this._normalTransform = null;\n    this._min = null;\n    this._max = null;\n  }\n\n  set flipWinding(value) {\n    if (this._geometryStarted) {\n      throw new Error(`Cannot change flipWinding before ending the current geometry.`);\n    }\n    this._flipWinding = value;\n  }\n\n  get flipWinding() {\n    this._flipWinding;\n  }\n\n  set invertNormals(value) {\n    if (this._geometryStarted) {\n      throw new Error(`Cannot change invertNormals before ending the current geometry.`);\n    }\n    this._invertNormals = value;\n  }\n\n  get invertNormals() {\n    this._invertNormals;\n  }\n\n  set transform(value) {\n    if (this._geometryStarted) {\n      throw new Error(`Cannot change transform before ending the current geometry.`);\n    }\n    this._transform = value;\n    if (this._transform) {\n      if (!this._normalTransform) {\n        this._normalTransform = mat3.create();\n      }\n      mat3.fromMat4(this._normalTransform, this._transform);\n    }\n  }\n\n  get transform() {\n    this._transform;\n  }\n\n  startGeometry() {\n    if (this._geometryStarted) {\n      throw new Error(`Attempted to start a new geometry before the previous one was ended.`);\n    }\n\n    this._geometryStarted = true;\n    this._vertexIndex = 0;\n    this._highIndex = 0;\n  }\n\n  endGeometry() {\n    if (!this._geometryStarted) {\n      throw new Error(`Attempted to end a geometry before one was started.`);\n    }\n\n    if (this._highIndex >= this._vertexIndex) {\n      throw new Error(`Geometry contains indices that are out of bounds.\n                       (Contains an index of ${this._highIndex} when the vertex count is ${this._vertexIndex})`);\n    }\n\n    this._geometryStarted = false;\n    this._vertexOffset += this._vertexIndex;\n\n    // TODO: Anything else need to be done to finish processing here?\n  }\n\n  pushVertex(x, y, z, u = 0, v = 0, nx = 0, ny = 0, nz = 1) {\n    if (!this._geometryStarted) {\n      throw new Error(`Cannot push vertices before calling startGeometry().`);\n    }\n\n    // Transform the incoming vertex if we have a transformation matrix\n    if (this._transform) {\n      tempVec3[0] = x;\n      tempVec3[1] = y;\n      tempVec3[2] = z;\n      vec3.transformMat4(tempVec3, tempVec3, this._transform);\n      x = tempVec3[0];\n      y = tempVec3[1];\n      z = tempVec3[2];\n\n      tempVec3[0] = nx;\n      tempVec3[1] = ny;\n      tempVec3[2] = nz;\n      vec3.transformMat3(tempVec3, tempVec3, this._normalTransform);\n      nx = tempVec3[0];\n      ny = tempVec3[1];\n      nz = tempVec3[2];\n    }\n\n    if (this._invertNormals) {\n      nx *= -1.0;\n      ny *= -1.0;\n      nz *= -1.0;\n    }\n\n    this._vertices.push(x, y, z, u, v, nx, ny, nz);\n\n    if (this._min) {\n      this._min[0] = Math.min(this._min[0], x);\n      this._min[1] = Math.min(this._min[1], y);\n      this._min[2] = Math.min(this._min[2], z);\n      this._max[0] = Math.max(this._max[0], x);\n      this._max[1] = Math.max(this._max[1], y);\n      this._max[2] = Math.max(this._max[2], z);\n    } else {\n      this._min = vec3.fromValues(x, y, z);\n      this._max = vec3.fromValues(x, y, z);\n    }\n\n    return this._vertexIndex++;\n  }\n\n  get nextVertexIndex() {\n    return this._vertexIndex;\n  }\n\n  pushTriangle(idxA, idxB, idxC) {\n    if (!this._geometryStarted) {\n      throw new Error(`Cannot push triangles before calling startGeometry().`);\n    }\n\n    this._highIndex = Math.max(this._highIndex, idxA, idxB, idxC);\n\n    idxA += this._vertexOffset;\n    idxB += this._vertexOffset;\n    idxC += this._vertexOffset;\n\n    if (this._flipWinding) {\n      this._indices.push(idxC, idxB, idxA);\n    } else {\n      this._indices.push(idxA, idxB, idxC);\n    }\n  }\n\n  clear() {\n    if (this._geometryStarted) {\n      throw new Error(`Cannot clear before ending the current geometry.`);\n    }\n\n    this._vertices = [];\n    this._indices = [];\n    this._vertexOffset = 0;\n    this._min = null;\n    this._max = null;\n  }\n\n  finishPrimitive(renderer) {\n    if (!this._vertexOffset) {\n      throw new Error(`Attempted to call finishPrimitive() before creating any geometry.`);\n    }\n\n    let vertexBuffer = renderer.createRenderBuffer(GL.ARRAY_BUFFER, new Float32Array(this._vertices));\n    let indexBuffer = renderer.createRenderBuffer(GL.ELEMENT_ARRAY_BUFFER, new Uint16Array(this._indices));\n\n    let attribs = [\n      new PrimitiveAttribute('POSITION', vertexBuffer, 3, GL.FLOAT, 32, 0),\n      new PrimitiveAttribute('TEXCOORD_0', vertexBuffer, 2, GL.FLOAT, 32, 12),\n      new PrimitiveAttribute('NORMAL', vertexBuffer, 3, GL.FLOAT, 32, 20),\n    ];\n\n    let primitive = new Primitive(attribs, this._indices.length);\n    primitive.setIndexBuffer(indexBuffer);\n    primitive.setBounds(this._min, this._max);\n\n    return primitive;\n  }\n}\n\nexport class GeometryBuilderBase {\n  constructor(primitiveStream) {\n    if (primitiveStream) {\n      this._stream = primitiveStream;\n    } else {\n      this._stream = new PrimitiveStream();\n    }\n  }\n\n  set primitiveStream(value) {\n    this._stream = value;\n  }\n\n  get primitiveStream() {\n    return this._stream;\n  }\n\n  finishPrimitive(renderer) {\n    return this._stream.finishPrimitive(renderer);\n  }\n\n  clear() {\n    this._stream.clear();\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {PbrMaterial} from '../materials/pbr.js';\nimport {Node} from '../core/node.js';\nimport {Primitive, PrimitiveAttribute} from '../core/primitive.js';\nimport {ImageTexture, ColorTexture} from '../core/texture.js';\n\nconst GL = WebGLRenderingContext; // For enums\n\nconst GLB_MAGIC = 0x46546C67;\nconst CHUNK_TYPE = {\n  JSON: 0x4E4F534A,\n  BIN: 0x004E4942,\n};\n\nfunction isAbsoluteUri(uri) {\n  let absRegEx = new RegExp('^'+window.location.protocol, 'i');\n  return !!uri.match(absRegEx);\n}\n\nfunction isDataUri(uri) {\n  let dataRegEx = /^data:/;\n  return !!uri.match(dataRegEx);\n}\n\nfunction resolveUri(uri, baseUrl) {\n  if (isAbsoluteUri(uri) || isDataUri(uri)) {\n      return uri;\n  }\n  return baseUrl + uri;\n}\n\nfunction getComponentCount(type) {\n  switch (type) {\n    case 'SCALAR': return 1;\n    case 'VEC2': return 2;\n    case 'VEC3': return 3;\n    case 'VEC4': return 4;\n    default: return 0;\n  }\n}\n\n/**\n * Gltf2SceneLoader\n * Loads glTF 2.0 scenes into a renderable node tree.\n */\n\nexport class Gltf2Loader {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this._gl = renderer._gl;\n  }\n\n  loadFromUrl(url) {\n    return fetch(url)\n        .then((response) => {\n          let i = url.lastIndexOf('/');\n          let baseUrl = (i !== 0) ? url.substring(0, i + 1) : '';\n\n          if (url.endsWith('.gltf')) {\n            return response.json().then((json) => {\n              return this.loadFromJson(json, baseUrl);\n            });\n          } else if (url.endsWith('.glb')) {\n            return response.arrayBuffer().then((arrayBuffer) => {\n              return this.loadFromBinary(arrayBuffer, baseUrl);\n            });\n          } else {\n            throw new Error('Unrecognized file extension');\n          }\n        });\n  }\n\n  loadFromBinary(arrayBuffer, baseUrl) {\n    let headerView = new DataView(arrayBuffer, 0, 12);\n    let magic = headerView.getUint32(0, true);\n    let version = headerView.getUint32(4, true);\n    let length = headerView.getUint32(8, true);\n\n    if (magic != GLB_MAGIC) {\n      throw new Error('Invalid magic string in binary header.');\n    }\n\n    if (version != 2) {\n      throw new Error('Incompatible version in binary header.');\n    }\n\n    let chunks = {};\n    let chunkOffset = 12;\n    while (chunkOffset < length) {\n      let chunkHeaderView = new DataView(arrayBuffer, chunkOffset, 8);\n      let chunkLength = chunkHeaderView.getUint32(0, true);\n      let chunkType = chunkHeaderView.getUint32(4, true);\n      chunks[chunkType] = arrayBuffer.slice(chunkOffset + 8, chunkOffset + 8 + chunkLength);\n      chunkOffset += chunkLength + 8;\n    }\n\n    if (!chunks[CHUNK_TYPE.JSON]) {\n      throw new Error('File contained no json chunk.');\n    }\n\n    let decoder = new TextDecoder('utf-8');\n    let jsonString = decoder.decode(chunks[CHUNK_TYPE.JSON]);\n    let json = JSON.parse(jsonString);\n    return this.loadFromJson(json, baseUrl, chunks[CHUNK_TYPE.BIN]);\n  }\n\n  loadFromJson(json, baseUrl, binaryChunk) {\n    if (!json.asset) {\n      throw new Error('Missing asset description.');\n    }\n\n    if (json.asset.minVersion != '2.0' && json.asset.version != '2.0') {\n      throw new Error('Incompatible asset version.');\n    }\n\n    let buffers = [];\n    if (binaryChunk) {\n      buffers[0] = new Gltf2Resource({}, baseUrl, binaryChunk);\n    } else {\n      for (let buffer of json.buffers) {\n        buffers.push(new Gltf2Resource(buffer, baseUrl));\n      }\n    }\n\n    let bufferViews = [];\n    for (let bufferView of json.bufferViews) {\n      bufferViews.push(new Gltf2BufferView(bufferView, buffers));\n    }\n\n    let images = [];\n    if (json.images) {\n      for (let image of json.images) {\n        images.push(new Gltf2Resource(image, baseUrl));\n      }\n    }\n\n    let textures = [];\n    if (json.textures) {\n      for (let texture of json.textures) {\n        let image = images[texture.source];\n        let glTexture = image.texture(bufferViews);\n        if (texture.sampler) {\n          let sampler = sampler[texture.sampler];\n          glTexture.sampler.minFilter = sampler.minFilter;\n          glTexture.sampler.magFilter = sampler.magFilter;\n          glTexture.sampler.wrapS = sampler.wrapS;\n          glTexture.sampler.wrapT = sampler.wrapT;\n        }\n        textures.push(glTexture);\n      }\n    }\n\n    function getTexture(textureInfo) {\n      if (!textureInfo) {\n        return null;\n      }\n      return textures[textureInfo.index];\n    }\n\n    let materials = [];\n    if (json.materials) {\n      for (let material of json.materials) {\n        let glMaterial = new PbrMaterial();\n        let pbr = material.pbrMetallicRoughness || {};\n\n        glMaterial.baseColorFactor.value = pbr.baseColorFactor || [1, 1, 1, 1];\n        glMaterial.baseColor.texture = getTexture(pbr.baseColorTexture);\n        glMaterial.metallicRoughnessFactor.value = [\n          pbr.metallicFactor || 1.0,\n          pbr.roughnessFactor || 1.0,\n        ];\n        glMaterial.metallicRoughness.texture = getTexture(pbr.metallicRoughnessTexture);\n        glMaterial.normal.texture = getTexture(json.normalTexture);\n        glMaterial.occlusion.texture = getTexture(json.occlusionTexture);\n        glMaterial.occlusionStrength.value = (json.occlusionTexture && json.occlusionTexture.strength) ?\n                                              json.occlusionTexture.strength : 1.0;\n        glMaterial.emissiveFactor.value = material.emissiveFactor || [0, 0, 0];\n        glMaterial.emissive.texture = getTexture(json.emissiveTexture);\n        if (!glMaterial.emissive.texture && json.emissiveFactor) {\n          glMaterial.emissive.texture = new ColorTexture(1.0, 1.0, 1.0, 1.0);\n        }\n\n        switch (material.alphaMode) {\n          case 'BLEND':\n            glMaterial.state.blend = true;\n            break;\n          case 'MASK':\n            // Not really supported.\n            glMaterial.state.blend = true;\n            break;\n          default: // Includes 'OPAQUE'\n            glMaterial.state.blend = false;\n        }\n\n        // glMaterial.alpha_mode = material.alphaMode;\n        // glMaterial.alpha_cutoff = material.alphaCutoff;\n        glMaterial.state.cullFace = !(material.doubleSided);\n\n        materials.push(glMaterial);\n      }\n    }\n\n    let accessors = json.accessors;\n\n    let meshes = [];\n    for (let mesh of json.meshes) {\n      let glMesh = new Gltf2Mesh();\n      meshes.push(glMesh);\n\n      for (let primitive of mesh.primitives) {\n        let material = null;\n        if ('material' in primitive) {\n          material = materials[primitive.material];\n        } else {\n          // Create a \"default\" material if the primitive has none.\n          material = new PbrMaterial();\n        }\n\n        let attributes = [];\n        let elementCount = 0;\n        /* let glPrimitive = new Gltf2Primitive(primitive, material);\n        glMesh.primitives.push(glPrimitive); */\n\n        let min = null;\n        let max = null;\n\n        for (let name in primitive.attributes) {\n          let accessor = accessors[primitive.attributes[name]];\n          let bufferView = bufferViews[accessor.bufferView];\n          elementCount = accessor.count;\n\n          let glAttribute = new PrimitiveAttribute(\n            name,\n            bufferView.renderBuffer(this.renderer, GL.ARRAY_BUFFER),\n            getComponentCount(accessor.type),\n            accessor.componentType,\n            bufferView.byteStride || 0,\n            accessor.byteOffset || 0\n          );\n          glAttribute.normalized = accessor.normalized || false;\n\n          if (name == 'POSITION') {\n            min = accessor.min;\n            max = accessor.max;\n          }\n\n          attributes.push(glAttribute);\n        }\n\n        let glPrimitive = new Primitive(attributes, elementCount, primitive.mode);\n\n        if ('indices' in primitive) {\n          let accessor = accessors[primitive.indices];\n          let bufferView = bufferViews[accessor.bufferView];\n\n          glPrimitive.setIndexBuffer(\n            bufferView.renderBuffer(this.renderer, GL.ELEMENT_ARRAY_BUFFER),\n            accessor.byteOffset || 0,\n            accessor.componentType\n          );\n          glPrimitive.indexType = accessor.componentType;\n          glPrimitive.indexByteOffset = accessor.byteOffset || 0;\n          glPrimitive.elementCount = accessor.count;\n        }\n\n        if (min && max) {\n          glPrimitive.setBounds(min, max);\n        }\n\n        // After all the attributes have been processed, get a program that is\n        // appropriate for both the material and the primitive attributes.\n        glMesh.primitives.push(\n            this.renderer.createRenderPrimitive(glPrimitive, material));\n      }\n    }\n\n    let sceneNode = new Node();\n    let scene = json.scenes[json.scene];\n    for (let nodeId of scene.nodes) {\n      let node = json.nodes[nodeId];\n      sceneNode.addNode(\n          this.processNodes(node, json.nodes, meshes));\n    }\n\n    return sceneNode;\n  }\n\n  processNodes(node, nodes, meshes) {\n    let glNode = new Node();\n    glNode.name = node.name;\n\n    if ('mesh' in node) {\n      let mesh = meshes[node.mesh];\n      for (let primitive of mesh.primitives) {\n        glNode.addRenderPrimitive(primitive);\n      }\n    }\n\n    if (node.matrix) {\n      glNode.matrix = new Float32Array(node.matrix);\n    } else if (node.translation || node.rotation || node.scale) {\n      if (node.translation) {\n        glNode.translation = new Float32Array(node.translation);\n      }\n\n      if (node.rotation) {\n        glNode.rotation = new Float32Array(node.rotation);\n      }\n\n      if (node.scale) {\n        glNode.scale = new Float32Array(node.scale);\n      }\n    }\n\n    if (node.children) {\n      for (let nodeId of node.children) {\n        let node = nodes[nodeId];\n        glNode.addNode(this.processNodes(node, nodes, meshes));\n      }\n    }\n\n    return glNode;\n  }\n}\n\nclass Gltf2Mesh {\n  constructor() {\n    this.primitives = [];\n  }\n}\n\nclass Gltf2BufferView {\n  constructor(json, buffers) {\n    this.buffer = buffers[json.buffer];\n    this.byteOffset = json.byteOffset || 0;\n    this.byteLength = json.byteLength || null;\n    this.byteStride = json.byteStride;\n\n    this._viewPromise = null;\n    this._renderBuffer = null;\n  }\n\n  dataView() {\n    if (!this._viewPromise) {\n      this._viewPromise = this.buffer.arrayBuffer().then((arrayBuffer) => {\n        return new DataView(arrayBuffer, this.byteOffset, this.byteLength);\n      });\n    }\n    return this._viewPromise;\n  }\n\n  renderBuffer(renderer, target) {\n    if (!this._renderBuffer) {\n      this._renderBuffer = renderer.createRenderBuffer(target, this.dataView());\n    }\n    return this._renderBuffer;\n  }\n}\n\nclass Gltf2Resource {\n  constructor(json, baseUrl, arrayBuffer) {\n    this.json = json;\n    this.baseUrl = baseUrl;\n\n    this._dataPromise = null;\n    this._texture = null;\n    if (arrayBuffer) {\n      this._dataPromise = Promise.resolve(arrayBuffer);\n    }\n  }\n\n  arrayBuffer() {\n    if (!this._dataPromise) {\n      if (isDataUri(this.json.uri)) {\n        let base64String = this.json.uri.replace('data:application/octet-stream;base64,', '');\n        let binaryArray = Uint8Array.from(atob(base64String), (c) => c.charCodeAt(0));\n        this._dataPromise = Promise.resolve(binaryArray.buffer);\n        return this._dataPromise;\n      }\n\n      this._dataPromise = fetch(resolveUri(this.json.uri, this.baseUrl))\n          .then((response) => response.arrayBuffer());\n    }\n    return this._dataPromise;\n  }\n\n  texture(bufferViews) {\n    if (!this._texture) {\n      let img = new Image();\n      this._texture = new ImageTexture(img);\n\n      if (this.json.uri) {\n        if (isDataUri(this.json.uri)) {\n          img.src = this.json.uri;\n        } else {\n          img.src = `${this.baseUrl}${this.json.uri}`;\n        }\n      } else {\n        let view = bufferViews[this.json.bufferView];\n        view.dataView().then((dataView) => {\n          let blob = new Blob([dataView], {type: this.json.mimeType});\n          img.src = window.URL.createObjectURL(blob);\n        });\n      }\n    }\n    return this._texture;\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {Material} from '../core/material.js';\nimport {ATTRIB_MASK} from '../core/renderer.js';\n\nconst VERTEX_SOURCE = `\nattribute vec3 POSITION, NORMAL;\nattribute vec2 TEXCOORD_0, TEXCOORD_1;\n\nuniform vec3 CAMERA_POSITION;\nuniform vec3 LIGHT_DIRECTION;\n\nvarying vec3 vLight; // Vector from vertex to light.\nvarying vec3 vView; // Vector from vertex to camera.\nvarying vec2 vTex;\n\n#ifdef USE_NORMAL_MAP\nattribute vec4 TANGENT;\nvarying mat3 vTBN;\n#else\nvarying vec3 vNorm;\n#endif\n\n#ifdef USE_VERTEX_COLOR\nattribute vec4 COLOR_0;\nvarying vec4 vCol;\n#endif\n\nvec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n  vec3 n = normalize(vec3(model * vec4(NORMAL, 0.0)));\n#ifdef USE_NORMAL_MAP\n  vec3 t = normalize(vec3(model * vec4(TANGENT.xyz, 0.0)));\n  vec3 b = cross(n, t) * TANGENT.w;\n  vTBN = mat3(t, b, n);\n#else\n  vNorm = n;\n#endif\n\n#ifdef USE_VERTEX_COLOR\n  vCol = COLOR_0;\n#endif\n\n  vTex = TEXCOORD_0;\n  vec4 mPos = model * vec4(POSITION, 1.0);\n  vLight = -LIGHT_DIRECTION;\n  vView = CAMERA_POSITION - mPos.xyz;\n  return proj * view * mPos;\n}`;\n\n// These equations are borrowed with love from this docs from Epic because I\n// just don't have anything novel to bring to the PBR scene.\n// http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\nconst EPIC_PBR_FUNCTIONS = `\nvec3 lambertDiffuse(vec3 cDiff) {\n  return cDiff / M_PI;\n}\n\nfloat specD(float a, float nDotH) {\n  float aSqr = a * a;\n  float f = ((nDotH * nDotH) * (aSqr - 1.0) + 1.0);\n  return aSqr / (M_PI * f * f);\n}\n\nfloat specG(float roughness, float nDotL, float nDotV) {\n  float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\n  float gl = nDotL / (nDotL * (1.0 - k) + k);\n  float gv = nDotV / (nDotV * (1.0 - k) + k);\n  return gl * gv;\n}\n\nvec3 specF(float vDotH, vec3 F0) {\n  float exponent = (-5.55473 * vDotH - 6.98316) * vDotH;\n  float base = 2.0;\n  return F0 + (1.0 - F0) * pow(base, exponent);\n}`;\n\nconst FRAGMENT_SOURCE = `\n#define M_PI 3.14159265\n\nuniform vec4 baseColorFactor;\n#ifdef USE_BASE_COLOR_MAP\nuniform sampler2D baseColorTex;\n#endif\n\nvarying vec3 vLight;\nvarying vec3 vView;\nvarying vec2 vTex;\n\n#ifdef USE_VERTEX_COLOR\nvarying vec4 vCol;\n#endif\n\n#ifdef USE_NORMAL_MAP\nuniform sampler2D normalTex;\nvarying mat3 vTBN;\n#else\nvarying vec3 vNorm;\n#endif\n\n#ifdef USE_METAL_ROUGH_MAP\nuniform sampler2D metallicRoughnessTex;\n#endif\nuniform vec2 metallicRoughnessFactor;\n\n#ifdef USE_OCCLUSION\nuniform sampler2D occlusionTex;\nuniform float occlusionStrength;\n#endif\n\n#ifdef USE_EMISSIVE_TEXTURE\nuniform sampler2D emissiveTex;\n#endif\nuniform vec3 emissiveFactor;\n\nuniform vec3 LIGHT_COLOR;\n\nconst vec3 dielectricSpec = vec3(0.04);\nconst vec3 black = vec3(0.0);\n\n${EPIC_PBR_FUNCTIONS}\n\nvec4 fragment_main() {\n#ifdef USE_BASE_COLOR_MAP\n  vec4 baseColor = texture2D(baseColorTex, vTex) * baseColorFactor;\n#else\n  vec4 baseColor = baseColorFactor;\n#endif\n\n#ifdef USE_VERTEX_COLOR\n  baseColor *= vCol;\n#endif\n\n#ifdef USE_NORMAL_MAP\n  vec3 n = texture2D(normalTex, vTex).rgb;\n  n = normalize(vTBN * (2.0 * n - 1.0));\n#else\n  vec3 n = normalize(vNorm);\n#endif\n\n#ifdef FULLY_ROUGH\n  float metallic = 0.0;\n#else\n  float metallic = metallicRoughnessFactor.x;\n#endif\n\n  float roughness = metallicRoughnessFactor.y;\n\n#ifdef USE_METAL_ROUGH_MAP\n  vec4 metallicRoughness = texture2D(metallicRoughnessTex, vTex);\n  metallic *= metallicRoughness.b;\n  roughness *= metallicRoughness.g;\n#endif\n  \n  vec3 l = normalize(vLight);\n  vec3 v = normalize(vView);\n  vec3 h = normalize(l+v);\n\n  float nDotL = clamp(dot(n, l), 0.001, 1.0);\n  float nDotV = abs(dot(n, v)) + 0.001;\n  float nDotH = max(dot(n, h), 0.0);\n  float vDotH = max(dot(v, h), 0.0);\n\n  // From GLTF Spec\n  vec3 cDiff = mix(baseColor.rgb * (1.0 - dielectricSpec.r), black, metallic); // Diffuse color\n  vec3 F0 = mix(dielectricSpec, baseColor.rgb, metallic); // Specular color\n  float a = roughness * roughness;\n\n#ifdef FULLY_ROUGH\n  vec3 specular = F0 * 0.45;\n#else\n  vec3 F = specF(vDotH, F0);\n  float D = specD(a, nDotH);\n  float G = specG(roughness, nDotL, nDotV);\n  vec3 specular = (D * F * G) / (4.0 * nDotL * nDotV);\n#endif\n  float halfLambert = dot(n, l) * 0.5 + 0.5;\n  halfLambert *= halfLambert;\n\n  vec3 color = (halfLambert * LIGHT_COLOR * lambertDiffuse(cDiff)) + specular;\n\n#ifdef USE_OCCLUSION\n  float occlusion = texture2D(occlusionTex, vTex).r;\n  color = mix(color, color * occlusion, occlusionStrength);\n#endif\n  \n  vec3 emissive = emissiveFactor;\n#ifdef USE_EMISSIVE_TEXTURE\n  emissive *= texture2D(emissiveTex, vTex).rgb;\n#endif\n  color += emissive;\n\n  // gamma correction\n  //color = pow(color, vec3(1.0/2.2));\n\n  return vec4(color, baseColor.a);\n}`;\n\nexport class PbrMaterial extends Material {\n  constructor() {\n    super();\n\n    this.baseColor = this.defineSampler('baseColorTex');\n    this.metallicRoughness = this.defineSampler('metallicRoughnessTex');\n    this.normal = this.defineSampler('normalTex');\n    this.occlusion = this.defineSampler('occlusionTex');\n    this.emissive = this.defineSampler('emissiveTex');\n\n    this.baseColorFactor = this.defineUniform('baseColorFactor', [1.0, 1.0, 1.0, 1.0]);\n    this.metallicRoughnessFactor = this.defineUniform('metallicRoughnessFactor', [1.0, 1.0]);\n    this.occlusionStrength = this.defineUniform('occlusionStrength', 1.0);\n    this.emissiveFactor = this.defineUniform('emissiveFactor', [0, 0, 0]);\n  }\n\n  get materialName() {\n    return 'PBR';\n  }\n\n  get vertexSource() {\n    return VERTEX_SOURCE;\n  }\n\n  get fragmentSource() {\n    return FRAGMENT_SOURCE;\n  }\n\n  getProgramDefines(renderPrimitive) {\n    let programDefines = {};\n\n    if (renderPrimitive._attributeMask & ATTRIB_MASK.COLOR_0) {\n      programDefines['USE_VERTEX_COLOR'] = 1;\n    }\n\n    if (renderPrimitive._attributeMask & ATTRIB_MASK.TEXCOORD_0) {\n      if (this.baseColor.texture) {\n        programDefines['USE_BASE_COLOR_MAP'] = 1;\n      }\n\n      if (this.normal.texture && (renderPrimitive._attributeMask & ATTRIB_MASK.TANGENT)) {\n        programDefines['USE_NORMAL_MAP'] = 1;\n      }\n\n      if (this.metallicRoughness.texture) {\n        programDefines['USE_METAL_ROUGH_MAP'] = 1;\n      }\n\n      if (this.occlusion.texture) {\n        programDefines['USE_OCCLUSION'] = 1;\n      }\n\n      if (this.emissive.texture) {\n        programDefines['USE_EMISSIVE_TEXTURE'] = 1;\n      }\n    }\n\n    if ((!this.metallicRoughness.texture ||\n         !(renderPrimitive._attributeMask & ATTRIB_MASK.TEXCOORD_0)) &&\n        this.metallicRoughnessFactor.value[1] == 1.0) {\n      programDefines['FULLY_ROUGH'] = 1;\n    }\n\n    return programDefines;\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport * as glMatrix from '../../node_modules/gl-matrix/src/gl-matrix/common.js';\nimport * as mat2 from '../../node_modules/gl-matrix/src/gl-matrix/mat2.js';\nimport * as mat2d from '../../node_modules/gl-matrix/src/gl-matrix/mat2d.js';\nimport * as mat3 from '../../node_modules/gl-matrix/src/gl-matrix/mat3.js';\nimport * as mat4 from '../../node_modules/gl-matrix/src/gl-matrix/mat4.js';\nimport * as quat from '../../node_modules/gl-matrix/src/gl-matrix/quat.js';\nimport * as quat2 from '../../node_modules/gl-matrix/src/gl-matrix/quat2.js';\nimport * as vec2 from '../../node_modules/gl-matrix/src/gl-matrix/vec2.js';\nimport * as vec3 from '../../node_modules/gl-matrix/src/gl-matrix/vec3.js';\nimport * as vec4 from '../../node_modules/gl-matrix/src/gl-matrix/vec4.js';\n\nexport {\n  glMatrix,\n  mat2,\n  mat2d,\n  mat3,\n  mat4,\n  quat,\n  quat2,\n  vec2,\n  vec3,\n  vec4,\n};\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {mat3, vec3} from './gl-matrix.js';\n\nlet normalMat = mat3.create();\n\nconst RAY_INTERSECTION_OFFSET = 0.02;\n\nexport class Ray {\n  constructor(matrix = null) {\n    this.origin = vec3.create();\n\n    this._dir = vec3.create();\n    this._dir[2] = -1.0;\n\n    if (matrix) {\n      vec3.transformMat4(this.origin, this.origin, matrix);\n      mat3.fromMat4(normalMat, matrix);\n      vec3.transformMat3(this._dir, this._dir, normalMat);\n    }\n\n    // To force the inverse and sign calculations.\n    this.dir = this._dir;\n  }\n\n  get dir() {\n    return this._dir;\n  }\n\n  set dir(value) {\n    this._dir = vec3.copy(this._dir, value);\n    vec3.normalize(this._dir, this._dir);\n\n    this.inv_dir = vec3.fromValues(\n      1.0 / this._dir[0],\n      1.0 / this._dir[1],\n      1.0 / this._dir[2]);\n\n    this.sign = [\n      (this.inv_dir[0] < 0) ? 1 : 0,\n      (this.inv_dir[1] < 0) ? 1 : 0,\n      (this.inv_dir[2] < 0) ? 1 : 0,\n    ];\n  }\n\n  // Borrowed from:\n  // eslint-disable-next-line max-len\n  // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection\n  intersectsAABB(min, max) {\n    let r = this;\n\n    let bounds = [min, max];\n\n    let tmin = (bounds[r.sign[0]][0] - r.origin[0]) * r.inv_dir[0];\n    let tmax = (bounds[1-r.sign[0]][0] - r.origin[0]) * r.inv_dir[0];\n    let tymin = (bounds[r.sign[1]][1] - r.origin[1]) * r.inv_dir[1];\n    let tymax = (bounds[1-r.sign[1]][1] - r.origin[1]) * r.inv_dir[1];\n\n    if ((tmin > tymax) || (tymin > tmax)) {\n      return null;\n    }\n    if (tymin > tmin) {\n      tmin = tymin;\n    }\n    if (tymax < tmax) {\n      tmax = tymax;\n    }\n\n    let tzmin = (bounds[r.sign[2]][2] - r.origin[2]) * r.inv_dir[2];\n    let tzmax = (bounds[1-r.sign[2]][2] - r.origin[2]) * r.inv_dir[2];\n\n    if ((tmin > tzmax) || (tzmin > tmax)) {\n      return null;\n    }\n    if (tzmin > tmin) {\n      tmin = tzmin;\n    }\n    if (tzmax < tmax) {\n      tmax = tzmax;\n    }\n\n    let t = -1;\n    if (tmin > 0 && tmax > 0) {\n      t = Math.min(tmin, tmax);\n    } else if (tmin > 0) {\n      t = tmin;\n    } else if (tmax > 0) {\n      t = tmax;\n    } else {\n      // Intersection is behind the ray origin.\n      return null;\n    }\n\n    // Push ray intersection point back along the ray a bit so that cursors\n    // don't accidentally intersect with the hit surface.\n    t -= RAY_INTERSECTION_OFFSET;\n\n    // Return the point where the ray first intersected with the AABB.\n    let intersectionPoint = vec3.clone(this._dir);\n    vec3.scale(intersectionPoint, intersectionPoint, t);\n    vec3.add(intersectionPoint, intersectionPoint, this.origin);\n    return intersectionPoint;\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/*\nThis file renders a passed in XRStageBounds object and attempts\nto render geometry on the floor to indicate where the bounds is.\nXRStageBounds' `geometry` is a series of XRStageBoundsPoints (in\nclockwise-order) with `x` and `z` properties for each.\n*/\n\nimport {Material} from '../core/material.js';\nimport {Node} from '../core/node.js';\nimport {Primitive, PrimitiveAttribute} from '../core/primitive.js';\n\nconst GL = WebGLRenderingContext; // For enums\n\nclass BoundsMaterial extends Material {\n  constructor() {\n    super();\n\n    this.state.blend = true;\n    this.state.blendFuncSrc = GL.SRC_ALPHA;\n    this.state.blendFuncDst = GL.ONE;\n    this.state.depthTest = false;\n  }\n\n  get materialName() {\n    return 'BOUNDS_RENDERER';\n  }\n\n  get vertexSource() {\n    return `\n    attribute vec2 POSITION;\n\n    vec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n      return proj * view * model * vec4(POSITION, 1.0);\n    }`;\n  }\n\n  get fragmentSource() {\n    return `\n    precision mediump float;\n\n    vec4 fragment_main() {\n      return vec4(0.0, 1.0, 0.0, 0.3);\n    }`;\n  }\n}\n\nexport class BoundsRenderer extends Node {\n  constructor() {\n    super();\n\n    this._stageBounds = null;\n  }\n\n  onRendererChanged(renderer) {\n    this.stageBounds = this._stageBounds;\n  }\n\n  get stageBounds() {\n    return this._stageBounds;\n  }\n\n  set stageBounds(stageBounds) {\n    if (this._stageBounds) {\n      this.clearRenderPrimitives();\n    }\n    this._stageBounds = stageBounds;\n    if (!stageBounds || stageBounds.length === 0 || !this._renderer) {\n      return;\n    }\n\n    let verts = [];\n    let indices = [];\n\n    // Tessellate the bounding points from XRStageBounds and connect\n    // each point to a neighbor and 0,0,0.\n    const pointCount = stageBounds.geometry.length;\n    for (let i = 0; i < pointCount; i++) {\n      const point = stageBounds.geometry[i];\n      verts.push(point.x, 0, point.z);\n      indices.push(i, i === 0 ? pointCount - 1 : i - 1, pointCount);\n    }\n    // Center point\n    verts.push(0, 0, 0);\n\n    let vertexBuffer = this._renderer.createRenderBuffer(GL.ARRAY_BUFFER, new Float32Array(verts));\n    let indexBuffer = this._renderer.createRenderBuffer(GL.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices));\n\n    let attribs = [\n      new PrimitiveAttribute('POSITION', vertexBuffer, 3, GL.FLOAT, 12, 0),\n    ];\n\n    let primitive = new Primitive(attribs, indices.length);\n    primitive.setIndexBuffer(indexBuffer);\n\n    let renderPrimitive = this._renderer.createRenderPrimitive(primitive, new BoundsMaterial());\n    this.addRenderPrimitive(renderPrimitive);\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {Material} from '../core/material.js';\nimport {Node} from '../core/node.js';\nimport {PrimitiveStream} from '../geometry/primitive-stream.js';\n\nconst BUTTON_SIZE = 0.1;\nconst BUTTON_CORNER_RADIUS = 0.025;\nconst BUTTON_CORNER_SEGMENTS = 8;\nconst BUTTON_ICON_SIZE = 0.07;\nconst BUTTON_LAYER_DISTANCE = 0.005;\nconst BUTTON_COLOR = 0.75;\nconst BUTTON_ALPHA = 0.85;\nconst BUTTON_HOVER_COLOR = 0.9;\nconst BUTTON_HOVER_ALPHA = 1.0;\nconst BUTTON_HOVER_SCALE = 1.1;\nconst BUTTON_HOVER_TRANSITION_TIME_MS = 200;\n\nclass ButtonMaterial extends Material {\n  constructor() {\n    super();\n\n    this.state.blend = true;\n\n    this.defineUniform('hoverAmount', 0);\n  }\n\n  get materialName() {\n    return 'BUTTON_MATERIAL';\n  }\n\n  get vertexSource() {\n    return `\n    attribute vec3 POSITION;\n\n    uniform float hoverAmount;\n\n    vec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n      float scale = mix(1.0, ${BUTTON_HOVER_SCALE}, hoverAmount);\n      vec4 pos = vec4(POSITION.x * scale, POSITION.y * scale, POSITION.z * (scale + (hoverAmount * 0.2)), 1.0);\n      return proj * view * model * pos;\n    }`;\n  }\n\n  get fragmentSource() {\n    return `\n    uniform float hoverAmount;\n\n    const vec4 default_color = vec4(${BUTTON_COLOR}, ${BUTTON_COLOR}, ${BUTTON_COLOR}, ${BUTTON_ALPHA});\n    const vec4 hover_color = vec4(${BUTTON_HOVER_COLOR}, ${BUTTON_HOVER_COLOR},\n                                  ${BUTTON_HOVER_COLOR}, ${BUTTON_HOVER_ALPHA});\n\n    vec4 fragment_main() {\n      return mix(default_color, hover_color, hoverAmount);\n    }`;\n  }\n}\n\nclass ButtonIconMaterial extends Material {\n  constructor() {\n    super();\n\n    this.state.blend = true;\n\n    this.defineUniform('hoverAmount', 0);\n    this.icon = this.defineSampler('icon');\n  }\n\n  get materialName() {\n    return 'BUTTON_ICON_MATERIAL';\n  }\n\n  get vertexSource() {\n    return `\n    attribute vec3 POSITION;\n    attribute vec2 TEXCOORD_0;\n\n    uniform float hoverAmount;\n\n    varying vec2 vTexCoord;\n\n    vec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n      vTexCoord = TEXCOORD_0;\n      float scale = mix(1.0, ${BUTTON_HOVER_SCALE}, hoverAmount);\n      vec4 pos = vec4(POSITION.x * scale, POSITION.y * scale, POSITION.z * (scale + (hoverAmount * 0.2)), 1.0);\n      return proj * view * model * pos;\n    }`;\n  }\n\n  get fragmentSource() {\n    return `\n    uniform sampler2D icon;\n    varying vec2 vTexCoord;\n\n    vec4 fragment_main() {\n      return texture2D(icon, vTexCoord);\n    }`;\n  }\n}\n\nexport class ButtonNode extends Node {\n  constructor(iconTexture, callback) {\n    super();\n\n    // All buttons are selectable by default.\n    this.selectable = true;\n\n    this._selectHandler = callback;\n    this._iconTexture = iconTexture;\n    this._hovered = false;\n    this._hoverT = 0;\n  }\n\n  get iconTexture() {\n    return this._iconTexture;\n  }\n\n  set iconTexture(value) {\n    if (this._iconTexture == value) {\n      return;\n    }\n\n    this._iconTexture = value;\n    this._iconRenderPrimitive.samplers.icon.texture = value;\n  }\n\n  onRendererChanged(renderer) {\n    let stream = new PrimitiveStream();\n\n    let hd = BUTTON_LAYER_DISTANCE * 0.5;\n\n    // Build a rounded rect for the background.\n    let hs = BUTTON_SIZE * 0.5;\n    let ihs = hs - BUTTON_CORNER_RADIUS;\n    stream.startGeometry();\n\n    // Rounded corners and sides\n    let segments = BUTTON_CORNER_SEGMENTS * 4;\n    for (let i = 0; i < segments; ++i) {\n      let rad = i * ((Math.PI * 2.0) / segments);\n      let x = Math.cos(rad) * BUTTON_CORNER_RADIUS;\n      let y = Math.sin(rad) * BUTTON_CORNER_RADIUS;\n      let section = Math.floor(i / BUTTON_CORNER_SEGMENTS);\n      switch (section) {\n        case 0:\n          x += ihs;\n          y += ihs;\n          break;\n        case 1:\n          x -= ihs;\n          y += ihs;\n          break;\n        case 2:\n          x -= ihs;\n          y -= ihs;\n          break;\n        case 3:\n          x += ihs;\n          y -= ihs;\n          break;\n      }\n\n      stream.pushVertex(x, y, -hd, 0, 0, 0, 0, 1);\n\n      if (i > 1) {\n        stream.pushTriangle(0, i-1, i);\n      }\n    }\n\n    stream.endGeometry();\n\n    let buttonPrimitive = stream.finishPrimitive(renderer);\n    this._buttonRenderPrimitive = renderer.createRenderPrimitive(buttonPrimitive, new ButtonMaterial());\n    this.addRenderPrimitive(this._buttonRenderPrimitive);\n\n    // Build a simple textured quad for the foreground.\n    hs = BUTTON_ICON_SIZE * 0.5;\n    stream.clear();\n    stream.startGeometry();\n\n    stream.pushVertex(-hs, hs, hd, 0, 0, 0, 0, 1);\n    stream.pushVertex(-hs, -hs, hd, 0, 1, 0, 0, 1);\n    stream.pushVertex(hs, -hs, hd, 1, 1, 0, 0, 1);\n    stream.pushVertex(hs, hs, hd, 1, 0, 0, 0, 1);\n\n    stream.pushTriangle(0, 1, 2);\n    stream.pushTriangle(0, 2, 3);\n\n    stream.endGeometry();\n\n    let iconPrimitive = stream.finishPrimitive(renderer);\n    let iconMaterial = new ButtonIconMaterial();\n    iconMaterial.icon.texture = this._iconTexture;\n    this._iconRenderPrimitive = renderer.createRenderPrimitive(iconPrimitive, iconMaterial);\n    this.addRenderPrimitive(this._iconRenderPrimitive);\n  }\n\n  onHoverStart() {\n    this._hovered = true;\n  }\n\n  onHoverEnd() {\n    this._hovered = false;\n  }\n\n  _updateHoverState() {\n    let t = this._hoverT / BUTTON_HOVER_TRANSITION_TIME_MS;\n    // Cubic Ease In/Out\n    // TODO: Get a better animation system\n    let hoverAmount = t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1;\n    this._buttonRenderPrimitive.uniforms.hoverAmount.value = hoverAmount;\n    this._iconRenderPrimitive.uniforms.hoverAmount.value = hoverAmount;\n  }\n\n  onUpdate(timestamp, frameDelta) {\n    if (this._hovered && this._hoverT < BUTTON_HOVER_TRANSITION_TIME_MS) {\n      this._hoverT = Math.min(BUTTON_HOVER_TRANSITION_TIME_MS, this._hoverT + frameDelta);\n      this._updateHoverState();\n    } else if (!this._hovered && this._hoverT > 0) {\n      this._hoverT = Math.max(0.0, this._hoverT - frameDelta);\n      this._updateHoverState();\n    }\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {Material} from '../core/material.js';\nimport {Node} from '../core/node.js';\nimport {UrlTexture} from '../core/texture.js';\nimport {BoxBuilder} from '../geometry/box-builder.js';\nimport {mat4} from '../math/gl-matrix.js';\n\nclass CubeSeaMaterial extends Material {\n  constructor(heavy = false) {\n    super();\n\n    this.heavy = heavy;\n\n    this.baseColor = this.defineSampler('baseColor');\n  }\n\n  get materialName() {\n    return 'CUBE_SEA';\n  }\n\n  get vertexSource() {\n    return `\n    attribute vec3 POSITION;\n    attribute vec2 TEXCOORD_0;\n    attribute vec3 NORMAL;\n\n    varying vec2 vTexCoord;\n    varying vec3 vLight;\n\n    const vec3 lightDir = vec3(0.75, 0.5, 1.0);\n    const vec3 ambientColor = vec3(0.5, 0.5, 0.5);\n    const vec3 lightColor = vec3(0.75, 0.75, 0.75);\n\n    vec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n      vec3 normalRotated = vec3(model * vec4(NORMAL, 0.0));\n      float lightFactor = max(dot(normalize(lightDir), normalRotated), 0.0);\n      vLight = ambientColor + (lightColor * lightFactor);\n      vTexCoord = TEXCOORD_0;\n      return proj * view * model * vec4(POSITION, 1.0);\n    }`;\n  }\n\n  get fragmentSource() {\n    if (!this.heavy) {\n      return `\n      precision mediump float;\n      uniform sampler2D baseColor;\n      varying vec2 vTexCoord;\n      varying vec3 vLight;\n\n      vec4 fragment_main() {\n        return vec4(vLight, 1.0) * texture2D(baseColor, vTexCoord);\n      }`;\n    } else {\n      // Used when we want to stress the GPU a bit more.\n      // Stolen with love from https://www.clicktorelease.com/code/codevember-2016/4/\n      return `\n      precision mediump float;\n\n      uniform sampler2D diffuse;\n      varying vec2 vTexCoord;\n      varying vec3 vLight;\n\n      vec2 dimensions = vec2(64, 64);\n      float seed = 0.42;\n\n      vec2 hash( vec2 p ) {\n        p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3)));\n        return fract(sin(p)*18.5453);\n      }\n\n      vec3 hash3( vec2 p ) {\n          vec3 q = vec3( dot(p,vec2(127.1,311.7)),\n                 dot(p,vec2(269.5,183.3)),\n                 dot(p,vec2(419.2,371.9)) );\n        return fract(sin(q)*43758.5453);\n      }\n\n      float iqnoise( in vec2 x, float u, float v ) {\n        vec2 p = floor(x);\n        vec2 f = fract(x);\n        float k = 1.0+63.0*pow(1.0-v,4.0);\n        float va = 0.0;\n        float wt = 0.0;\n        for( int j=-2; j<=2; j++ )\n          for( int i=-2; i<=2; i++ ) {\n            vec2 g = vec2( float(i),float(j) );\n            vec3 o = hash3( p + g )*vec3(u,u,1.0);\n            vec2 r = g - f + o.xy;\n            float d = dot(r,r);\n            float ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n            va += o.z*ww;\n            wt += ww;\n          }\n        return va/wt;\n      }\n\n      // return distance, and cell id\n      vec2 voronoi( in vec2 x ) {\n        vec2 n = floor( x );\n        vec2 f = fract( x );\n        vec3 m = vec3( 8.0 );\n        for( int j=-1; j<=1; j++ )\n          for( int i=-1; i<=1; i++ ) {\n            vec2  g = vec2( float(i), float(j) );\n            vec2  o = hash( n + g );\n            vec2  r = g - f + (0.5+0.5*sin(seed+6.2831*o));\n            float d = dot( r, r );\n            if( d<m.x )\n              m = vec3( d, o );\n          }\n        return vec2( sqrt(m.x), m.y+m.z );\n      }\n\n      vec4 fragment_main() {\n        vec2 uv = ( vTexCoord );\n        uv *= vec2( 10., 10. );\n        uv += seed;\n        vec2 p = 0.5 - 0.5*sin( 0.*vec2(1.01,1.71) );\n\n        vec2 c = voronoi( uv );\n        vec3 col = vec3( c.y / 2. );\n\n        float f = iqnoise( 1. * uv + c.y, p.x, p.y );\n        col *= 1.0 + .25 * vec3( f );\n\n        return vec4(vLight, 1.0) * texture2D(diffuse, vTexCoord) * vec4( col, 1. );\n      }`;\n    }\n  }\n}\n\nexport class CubeSeaNode extends Node {\n  constructor(options = {}) {\n    super();\n\n    // Test variables\n    // If true, use a very heavyweight shader to stress the GPU.\n    this.heavyGpu = !!options.heavyGpu;\n\n    // Number and size of the static cubes. Warning, large values\n    // don't render right due to overflow of the int16 indices.\n    this.cubeCount = options.cubeCount || (this.heavyGpu ? 12 : 10);\n    this.cubeScale = options.cubeScale || 1.0;\n\n    // Draw only half the world cubes. Helps test variable render cost\n    // when combined with heavyGpu.\n    this.halfOnly = !!options.halfOnly;\n\n    // Automatically spin the world cubes. Intended for automated testing,\n    // not recommended for viewing in a headset.\n    this.autoRotate = !!options.autoRotate;\n\n    this._texture = new UrlTexture(options.imageUrl || 'media/textures/cube-sea.png');\n\n    this._material = new CubeSeaMaterial(this.heavyGpu);\n    this._material.baseColor.texture = this._texture;\n\n    this._renderPrimitive = null;\n  }\n\n  onRendererChanged(renderer) {\n    this._renderPrimitive = null;\n\n    let boxBuilder = new BoxBuilder();\n\n    // Build the spinning \"hero\" cubes\n    boxBuilder.pushCube([0, 0.25, -0.8], 0.1);\n    boxBuilder.pushCube([0.8, 0.25, 0], 0.1);\n    boxBuilder.pushCube([0, 0.25, 0.8], 0.1);\n    boxBuilder.pushCube([-0.8, 0.25, 0], 0.1);\n\n    let heroPrimitive = boxBuilder.finishPrimitive(renderer);\n\n    this.heroNode = renderer.createMesh(heroPrimitive, this._material);\n\n    this.rebuildCubes(boxBuilder);\n\n    this.cubeSeaNode = new Node();\n    this.cubeSeaNode.addRenderPrimitive(this._renderPrimitive);\n\n    this.addNode(this.cubeSeaNode);\n    this.addNode(this.heroNode);\n\n    return this.waitForComplete();\n  }\n\n  rebuildCubes(boxBuilder) {\n    if (!this._renderer) {\n      return;\n    }\n\n    if (!boxBuilder) {\n      boxBuilder = new BoxBuilder();\n    } else {\n      boxBuilder.clear();\n    }\n\n    let size = 0.4 * this.cubeScale;\n\n    // Build the cube sea\n    let halfGrid = this.cubeCount * 0.5;\n    for (let x = 0; x < this.cubeCount; ++x) {\n      for (let y = 0; y < this.cubeCount; ++y) {\n        for (let z = 0; z < this.cubeCount; ++z) {\n          let pos = [x - halfGrid, y - halfGrid, z - halfGrid];\n          // Only draw cubes on one side. Useful for testing variable render\n          // cost that depends on view direction.\n          if (this.halfOnly && pos[0] < 0) {\n            continue;\n          }\n\n          // Don't place a cube in the center of the grid.\n          if (pos[0] == 0 && pos[1] == 0 && pos[2] == 0) {\n            continue;\n          }\n\n          boxBuilder.pushCube(pos, size);\n        }\n      }\n    }\n\n    if (this.cubeCount > 12) {\n      // Each cube has 6 sides with 2 triangles and 3 indices per triangle, so\n      // the total number of indices needed is cubeCount^3 * 36. This exceeds\n      // the short index range past 12 cubes.\n      boxBuilder.indexType = 5125; // gl.UNSIGNED_INT\n    }\n    let cubeSeaPrimitive = boxBuilder.finishPrimitive(this._renderer);\n\n    if (!this._renderPrimitive) {\n      this._renderPrimitive = this._renderer.createRenderPrimitive(cubeSeaPrimitive, this._material);\n    } else {\n      this._renderPrimitive.setPrimitive(cubeSeaPrimitive);\n    }\n  }\n\n  onUpdate(timestamp, frameDelta) {\n    if (this.autoRotate) {\n      mat4.fromRotation(this.cubeSeaNode.matrix, timestamp / 500, [0, -1, 0]);\n    }\n    mat4.fromRotation(this.heroNode.matrix, timestamp / 2000, [0, 1, 0]);\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {Material} from '../core/material.js';\nimport {Node} from '../core/node.js';\nimport {PrimitiveStream} from '../geometry/primitive-stream.js';\n\nconst GL = WebGLRenderingContext; // For enums\n\nconst SHADOW_SEGMENTS = 32;\nconst SHADOW_GROUND_OFFSET = 0.01;\nconst SHADOW_CENTER_ALPHA = 0.7;\nconst SHADOW_INNER_ALPHA = 0.3;\nconst SHADOW_OUTER_ALPHA = 0.0;\nconst SHADOW_INNER_RADIUS = 0.6;\nconst SHADOW_OUTER_RADIUS = 1.0;\n\nclass DropShadowMaterial extends Material {\n  constructor() {\n    super();\n\n    this.state.blend = true;\n    this.state.blendFuncSrc = GL.ONE;\n    this.state.blendFuncDst = GL.ONE_MINUS_SRC_ALPHA;\n    this.state.depthFunc = GL.LEQUAL;\n    this.state.depthMask = false;\n  }\n\n  get materialName() {\n    return 'DROP_SHADOW_MATERIAL';\n  }\n\n  get vertexSource() {\n    return `\n    attribute vec3 POSITION;\n    attribute vec2 TEXCOORD_0;\n\n    varying float vShadow;\n\n    vec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n      vShadow = TEXCOORD_0.x;\n      return proj * view * model * vec4(POSITION, 1.0);\n    }`;\n  }\n\n  get fragmentSource() {\n    return `\n    varying float vShadow;\n\n    vec4 fragment_main() {\n      return vec4(0.0, 0.0, 0.0, vShadow);\n    }`;\n  }\n}\n\nexport class DropShadowNode extends Node {\n  constructor(iconTexture, callback) {\n    super();\n  }\n\n  onRendererChanged(renderer) {\n    let stream = new PrimitiveStream();\n\n    stream.startGeometry();\n\n    // Shadow center\n    stream.pushVertex(0, SHADOW_GROUND_OFFSET, 0, SHADOW_CENTER_ALPHA);\n\n    let segRad = ((Math.PI * 2.0) / SHADOW_SEGMENTS);\n\n    let idx;\n    for (let i = 0; i < SHADOW_SEGMENTS; ++i) {\n      idx = stream.nextVertexIndex;\n\n      let rad = i * segRad;\n      let x = Math.cos(rad);\n      let y = Math.sin(rad);\n      stream.pushVertex(x * SHADOW_INNER_RADIUS, SHADOW_GROUND_OFFSET, y * SHADOW_INNER_RADIUS, SHADOW_INNER_ALPHA);\n      stream.pushVertex(x * SHADOW_OUTER_RADIUS, SHADOW_GROUND_OFFSET, y * SHADOW_OUTER_RADIUS, SHADOW_OUTER_ALPHA);\n\n      if (i > 0) {\n        // Inner circle\n        stream.pushTriangle(0, idx, idx-2);\n\n        // Outer circle\n        stream.pushTriangle(idx, idx+1, idx-1);\n        stream.pushTriangle(idx, idx-1, idx-2);\n      }\n    }\n\n    stream.pushTriangle(0, 1, idx);\n\n    stream.pushTriangle(1, 2, idx+1);\n    stream.pushTriangle(1, idx+1, idx);\n\n    stream.endGeometry();\n\n    let shadowPrimitive = stream.finishPrimitive(renderer);\n    this._shadowRenderPrimitive = renderer.createRenderPrimitive(shadowPrimitive, new DropShadowMaterial());\n    this.addRenderPrimitive(this._shadowRenderPrimitive);\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {Node} from '../core/node.js';\nimport {Gltf2Loader} from '../loaders/gltf2.js';\n\n// Using a weak map here allows us to cache a loader per-renderer without\n// modifying the renderer object or leaking memory when it's garbage collected.\nlet gltfLoaderMap = new WeakMap();\n\nexport class Gltf2Node extends Node {\n  constructor(options) {\n    super();\n    this._url = options.url;\n\n    this._promise = null;\n    this._resolver = null;\n    this._rejecter = null;\n  }\n\n  onRendererChanged(renderer) {\n    let loader = gltfLoaderMap.get(renderer);\n    if (!loader) {\n      loader = new Gltf2Loader(renderer);\n      gltfLoaderMap.set(renderer, loader);\n    }\n\n    // Do we have a previously resolved promise? If so clear it.\n    if (!this._resolver && this._promise) {\n      this._promise = null;\n    }\n\n    this._ensurePromise();\n\n    loader.loadFromUrl(this._url).then((sceneNode) => {\n      this.addNode(sceneNode);\n      this._resolver(sceneNode.waitForComplete());\n      this._resolver = null;\n      this._rejecter = null;\n    }).catch((err) => {\n      this._rejecter(err);\n      this._resolver = null;\n      this._rejecter = null;\n    });\n  }\n\n  _ensurePromise() {\n    if (!this._promise) {\n      this._promise = new Promise((resolve, reject) => {\n        this._resolver = resolve;\n        this._rejecter = reject;\n      });\n    }\n    return this._promise;\n  }\n\n  waitForComplete() {\n    return this._ensurePromise();\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {Material, RENDER_ORDER} from '../core/material.js';\nimport {Node} from '../core/node.js';\nimport {Primitive, PrimitiveAttribute} from '../core/primitive.js';\nimport {DataTexture} from '../core/texture.js';\n\nconst GL = WebGLRenderingContext; // For enums\n\n// Laser texture data, 48x1 RGBA (not premultiplied alpha). This represents a\n// \"cross section\" of the laser beam with a bright core and a feathered edge.\n// Borrowed from Chromium source code.\nconst LASER_TEXTURE_DATA = new Uint8Array([\n0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0x02, 0xbf, 0xbf, 0xbf, 0x04, 0xcc, 0xcc, 0xcc, 0x05,\n0xdb, 0xdb, 0xdb, 0x07, 0xcc, 0xcc, 0xcc, 0x0a, 0xd8, 0xd8, 0xd8, 0x0d, 0xd2, 0xd2, 0xd2, 0x11,\n0xce, 0xce, 0xce, 0x15, 0xce, 0xce, 0xce, 0x1a, 0xce, 0xce, 0xce, 0x1f, 0xcd, 0xcd, 0xcd, 0x24,\n0xc8, 0xc8, 0xc8, 0x2a, 0xc9, 0xc9, 0xc9, 0x2f, 0xc9, 0xc9, 0xc9, 0x34, 0xc9, 0xc9, 0xc9, 0x39,\n0xc9, 0xc9, 0xc9, 0x3d, 0xc8, 0xc8, 0xc8, 0x41, 0xcb, 0xcb, 0xcb, 0x44, 0xee, 0xee, 0xee, 0x87,\n0xfa, 0xfa, 0xfa, 0xc8, 0xf9, 0xf9, 0xf9, 0xc9, 0xf9, 0xf9, 0xf9, 0xc9, 0xfa, 0xfa, 0xfa, 0xc9,\n0xfa, 0xfa, 0xfa, 0xc9, 0xf9, 0xf9, 0xf9, 0xc9, 0xf9, 0xf9, 0xf9, 0xc9, 0xfa, 0xfa, 0xfa, 0xc8,\n0xee, 0xee, 0xee, 0x87, 0xcb, 0xcb, 0xcb, 0x44, 0xc8, 0xc8, 0xc8, 0x41, 0xc9, 0xc9, 0xc9, 0x3d,\n0xc9, 0xc9, 0xc9, 0x39, 0xc9, 0xc9, 0xc9, 0x34, 0xc9, 0xc9, 0xc9, 0x2f, 0xc8, 0xc8, 0xc8, 0x2a,\n0xcd, 0xcd, 0xcd, 0x24, 0xce, 0xce, 0xce, 0x1f, 0xce, 0xce, 0xce, 0x1a, 0xce, 0xce, 0xce, 0x15,\n0xd2, 0xd2, 0xd2, 0x11, 0xd8, 0xd8, 0xd8, 0x0d, 0xcc, 0xcc, 0xcc, 0x0a, 0xdb, 0xdb, 0xdb, 0x07,\n0xcc, 0xcc, 0xcc, 0x05, 0xbf, 0xbf, 0xbf, 0x04, 0xff, 0xff, 0xff, 0x02, 0xff, 0xff, 0xff, 0x01,\n]);\n\nconst LASER_LENGTH = 1.0;\nconst LASER_DIAMETER = 0.01;\nconst LASER_FADE_END = 0.535;\nconst LASER_FADE_POINT = 0.5335;\nconst LASER_DEFAULT_COLOR = [1.0, 1.0, 1.0, 0.25];\n\nconst CURSOR_RADIUS = 0.004;\nconst CURSOR_SHADOW_RADIUS = 0.007;\nconst CURSOR_SHADOW_INNER_LUMINANCE = 0.5;\nconst CURSOR_SHADOW_OUTER_LUMINANCE = 0.0;\nconst CURSOR_SHADOW_INNER_OPACITY = 0.75;\nconst CURSOR_SHADOW_OUTER_OPACITY = 0.0;\nconst CURSOR_OPACITY = 0.9;\nconst CURSOR_SEGMENTS = 16;\nconst CURSOR_DEFAULT_COLOR = [1.0, 1.0, 1.0, 1.0];\nconst CURSOR_DEFAULT_HIDDEN_COLOR = [0.5, 0.5, 0.5, 0.25];\n\nconst DEFAULT_RESET_OPTIONS = {\n  controllers: true,\n  lasers: true,\n  cursors: true,\n};\n\nclass LaserMaterial extends Material {\n  constructor() {\n    super();\n    this.renderOrder = RENDER_ORDER.ADDITIVE;\n    this.state.cullFace = false;\n    this.state.blend = true;\n    this.state.blendFuncSrc = GL.ONE;\n    this.state.blendFuncDst = GL.ONE;\n    this.state.depthMask = false;\n\n    this.laser = this.defineSampler('diffuse');\n    this.laser.texture = new DataTexture(LASER_TEXTURE_DATA, 48, 1);\n    this.laserColor = this.defineUniform('laserColor', LASER_DEFAULT_COLOR);\n  }\n\n  get materialName() {\n    return 'INPUT_LASER';\n  }\n\n  get vertexSource() {\n    return `\n    attribute vec3 POSITION;\n    attribute vec2 TEXCOORD_0;\n\n    varying vec2 vTexCoord;\n\n    vec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n      vTexCoord = TEXCOORD_0;\n      return proj * view * model * vec4(POSITION, 1.0);\n    }`;\n  }\n\n  get fragmentSource() {\n    return `\n    precision mediump float;\n\n    uniform vec4 laserColor;\n    uniform sampler2D diffuse;\n    varying vec2 vTexCoord;\n\n    const float fadePoint = ${LASER_FADE_POINT};\n    const float fadeEnd = ${LASER_FADE_END};\n\n    vec4 fragment_main() {\n      vec2 uv = vTexCoord;\n      float front_fade_factor = 1.0 - clamp(1.0 - (uv.y - fadePoint) / (1.0 - fadePoint), 0.0, 1.0);\n      float back_fade_factor = clamp((uv.y - fadePoint) / (fadeEnd - fadePoint), 0.0, 1.0);\n      vec4 color = laserColor * texture2D(diffuse, vTexCoord);\n      float opacity = color.a * front_fade_factor * back_fade_factor;\n      return vec4(color.rgb * opacity, opacity);\n    }`;\n  }\n}\n\nconst CURSOR_VERTEX_SHADER = `\nattribute vec4 POSITION;\n\nvarying float vLuminance;\nvarying float vOpacity;\n\nvec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n  vLuminance = POSITION.z;\n  vOpacity = POSITION.w;\n\n  // Billboarded, constant size vertex transform.\n  vec4 screenPos = proj * view * model * vec4(0.0, 0.0, 0.0, 1.0);\n  screenPos /= screenPos.w;\n  screenPos.xy += POSITION.xy;\n  return screenPos;\n}`;\n\nconst CURSOR_FRAGMENT_SHADER = `\nprecision mediump float;\n\nuniform vec4 cursorColor;\nvarying float vLuminance;\nvarying float vOpacity;\n\nvec4 fragment_main() {\n  vec3 color = cursorColor.rgb * vLuminance;\n  float opacity = cursorColor.a * vOpacity;\n  return vec4(color * opacity, opacity);\n}`;\n\n// Cursors are drawn as billboards that always face the camera and are rendered\n// as a fixed size no matter how far away they are.\nclass CursorMaterial extends Material {\n  constructor() {\n    super();\n    this.renderOrder = RENDER_ORDER.ADDITIVE;\n    this.state.cullFace = false;\n    this.state.blend = true;\n    this.state.blendFuncSrc = GL.ONE;\n    this.state.depthMask = false;\n\n    this.cursorColor = this.defineUniform('cursorColor', CURSOR_DEFAULT_COLOR);\n  }\n\n  get materialName() {\n    return 'INPUT_CURSOR';\n  }\n\n  get vertexSource() {\n    return CURSOR_VERTEX_SHADER;\n  }\n\n  get fragmentSource() {\n    return CURSOR_FRAGMENT_SHADER;\n  }\n}\n\nclass CursorHiddenMaterial extends Material {\n  constructor() {\n    super();\n    this.renderOrder = RENDER_ORDER.ADDITIVE;\n    this.state.cullFace = false;\n    this.state.blend = true;\n    this.state.blendFuncSrc = GL.ONE;\n    this.state.depthFunc = GL.GEQUAL;\n    this.state.depthMask = false;\n\n    this.cursorColor = this.defineUniform('cursorColor', CURSOR_DEFAULT_HIDDEN_COLOR);\n  }\n\n  // TODO: Rename to \"program_name\"\n  get materialName() {\n    return 'INPUT_CURSOR_2';\n  }\n\n  get vertexSource() {\n    return CURSOR_VERTEX_SHADER;\n  }\n\n  get fragmentSource() {\n    return CURSOR_FRAGMENT_SHADER;\n  }\n}\n\nexport class InputRenderer extends Node {\n  constructor() {\n    super();\n\n    this._maxInputElements = 32;\n\n    this._controllers = [];\n    this._controllerNode = null;\n    this._controllerNodeHandedness = null;\n    this._lasers = null;\n    this._cursors = null;\n\n    this._activeControllers = 0;\n    this._activeLasers = 0;\n    this._activeCursors = 0;\n  }\n\n  onRendererChanged(renderer) {\n    this._controllers = [];\n    this._controllerNode = null;\n    this._controllerNodeHandedness = null;\n    this._lasers = null;\n    this._cursors = null;\n\n    this._activeControllers = 0;\n    this._activeLasers = 0;\n    this._activeCursors = 0;\n  }\n\n  setControllerMesh(controllerNode, handedness = 'right') {\n    this._controllerNode = controllerNode;\n    this._controllerNode.visible = false;\n    // FIXME: Temporary fix to initialize for cloning.\n    this.addNode(this._controllerNode);\n    this._controllerNodeHandedness = handedness;\n  }\n\n  addController(gripMatrix) {\n    if (!this._controllerNode) {\n        return;\n    }\n\n    let controller = null;\n    if (this._activeControllers < this._controllers.length) {\n      controller = this._controllers[this._activeControllers];\n    } else {\n      controller = this._controllerNode.clone();\n      this.addNode(controller);\n      this._controllers.push(controller);\n    }\n    this._activeControllers = (this._activeControllers + 1) % this._maxInputElements;\n\n    controller.matrix = gripMatrix;\n    controller.visible = true;\n  }\n\n  addLaserPointer(targetRay) {\n    // Create the laser pointer mesh if needed.\n    if (!this._lasers && this._renderer) {\n      this._lasers = [this._createLaserMesh()];\n      this.addNode(this._lasers[0]);\n    }\n\n    let laser = null;\n    if (this._activeLasers < this._lasers.length) {\n      laser = this._lasers[this._activeLasers];\n    } else {\n      laser = this._lasers[0].clone();\n      this.addNode(laser);\n      this._lasers.push(laser);\n    }\n    this._activeLasers = (this._activeLasers + 1) % this._maxInputElements;\n\n    laser.matrix = targetRay.transformMatrix;\n    laser.visible = true;\n  }\n\n  addCursor(cursorPos) {\n    // Create the cursor mesh if needed.\n    if (!this._cursors && this._renderer) {\n      this._cursors = [this._createCursorMesh()];\n      this.addNode(this._cursors[0]);\n    }\n\n    let cursor = null;\n    if (this._activeCursors < this._cursors.length) {\n      cursor = this._cursors[this._activeCursors];\n    } else {\n      cursor = this._cursors[0].clone();\n      this.addNode(cursor);\n      this._cursors.push(cursor);\n    }\n    this._activeCursors = (this._activeCursors + 1) % this._maxInputElements;\n\n    cursor.translation = cursorPos;\n    cursor.visible = true;\n  }\n\n  reset(options) {\n    if (!options) {\n      options = DEFAULT_RESET_OPTIONS;\n    }\n    if (this._controllers && options.controllers) {\n      for (let controller of this._controllers) {\n        controller.visible = false;\n      }\n      this._activeControllers = 0;\n    }\n    if (this._lasers && options.lasers) {\n      for (let laser of this._lasers) {\n        laser.visible = false;\n      }\n      this._activeLasers = 0;\n    }\n    if (this._cursors && options.cursors) {\n      for (let cursor of this._cursors) {\n        cursor.visible = false;\n      }\n      this._activeCursors = 0;\n    }\n  }\n\n  _createLaserMesh() {\n    let gl = this._renderer._gl;\n\n    let lr = LASER_DIAMETER * 0.5;\n    let ll = LASER_LENGTH;\n\n    // Laser is rendered as cross-shaped beam\n    let laserVerts = [\n    // X    Y   Z    U    V\n      0.0, lr, 0.0, 0.0, 1.0,\n      0.0, lr, -ll, 0.0, 0.0,\n      0.0, -lr, 0.0, 1.0, 1.0,\n      0.0, -lr, -ll, 1.0, 0.0,\n\n      lr, 0.0, 0.0, 0.0, 1.0,\n      lr, 0.0, -ll, 0.0, 0.0,\n      -lr, 0.0, 0.0, 1.0, 1.0,\n      -lr, 0.0, -ll, 1.0, 0.0,\n\n      0.0, -lr, 0.0, 0.0, 1.0,\n      0.0, -lr, -ll, 0.0, 0.0,\n      0.0, lr, 0.0, 1.0, 1.0,\n      0.0, lr, -ll, 1.0, 0.0,\n\n      -lr, 0.0, 0.0, 0.0, 1.0,\n      -lr, 0.0, -ll, 0.0, 0.0,\n      lr, 0.0, 0.0, 1.0, 1.0,\n      lr, 0.0, -ll, 1.0, 0.0,\n    ];\n    let laserIndices = [\n      0, 1, 2, 1, 3, 2,\n      4, 5, 6, 5, 7, 6,\n      8, 9, 10, 9, 11, 10,\n      12, 13, 14, 13, 15, 14,\n    ];\n\n    let laserVertexBuffer = this._renderer.createRenderBuffer(gl.ARRAY_BUFFER, new Float32Array(laserVerts));\n    let laserIndexBuffer = this._renderer.createRenderBuffer(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(laserIndices));\n\n    let laserIndexCount = laserIndices.length;\n\n    let laserAttribs = [\n      new PrimitiveAttribute('POSITION', laserVertexBuffer, 3, gl.FLOAT, 20, 0),\n      new PrimitiveAttribute('TEXCOORD_0', laserVertexBuffer, 2, gl.FLOAT, 20, 12),\n    ];\n\n    let laserPrimitive = new Primitive(laserAttribs, laserIndexCount);\n    laserPrimitive.setIndexBuffer(laserIndexBuffer);\n\n    let laserMaterial = new LaserMaterial();\n\n    let laserRenderPrimitive = this._renderer.createRenderPrimitive(laserPrimitive, laserMaterial);\n    let meshNode = new Node();\n    meshNode.addRenderPrimitive(laserRenderPrimitive);\n    return meshNode;\n  }\n\n  _createCursorMesh() {\n    let gl = this._renderer._gl;\n\n    // Cursor is a circular white dot with a dark \"shadow\" skirt around the edge\n    // that fades from black to transparent as it moves out from the center.\n    // Cursor verts are packed as [X, Y, Luminance, Opacity]\n    let cursorVerts = [];\n    let cursorIndices = [];\n\n    let segRad = (2.0 * Math.PI) / CURSOR_SEGMENTS;\n\n    // Cursor center\n    for (let i = 0; i < CURSOR_SEGMENTS; ++i) {\n      let rad = i * segRad;\n      let x = Math.cos(rad);\n      let y = Math.sin(rad);\n      cursorVerts.push(x * CURSOR_RADIUS, y * CURSOR_RADIUS, 1.0, CURSOR_OPACITY);\n\n      if (i > 1) {\n        cursorIndices.push(0, i-1, i);\n      }\n    }\n\n    let indexOffset = CURSOR_SEGMENTS;\n\n    // Cursor Skirt\n    for (let i = 0; i < CURSOR_SEGMENTS; ++i) {\n      let rad = i * segRad;\n      let x = Math.cos(rad);\n      let y = Math.sin(rad);\n      cursorVerts.push(x * CURSOR_RADIUS, y * CURSOR_RADIUS,\n          CURSOR_SHADOW_INNER_LUMINANCE, CURSOR_SHADOW_INNER_OPACITY);\n      cursorVerts.push(x * CURSOR_SHADOW_RADIUS, y * CURSOR_SHADOW_RADIUS,\n          CURSOR_SHADOW_OUTER_LUMINANCE, CURSOR_SHADOW_OUTER_OPACITY);\n\n      if (i > 0) {\n        let idx = indexOffset + (i * 2);\n        cursorIndices.push(idx-2, idx-1, idx);\n        cursorIndices.push(idx-1, idx+1, idx);\n      }\n    }\n\n    let idx = indexOffset + (CURSOR_SEGMENTS * 2);\n    cursorIndices.push(idx-2, idx-1, indexOffset);\n    cursorIndices.push(idx-1, indexOffset+1, indexOffset);\n\n    let cursorVertexBuffer = this._renderer.createRenderBuffer(gl.ARRAY_BUFFER, new Float32Array(cursorVerts));\n    let cursorIndexBuffer = this._renderer.createRenderBuffer(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cursorIndices));\n\n    let cursorIndexCount = cursorIndices.length;\n\n    let cursorAttribs = [\n      new PrimitiveAttribute('POSITION', cursorVertexBuffer, 4, gl.FLOAT, 16, 0),\n    ];\n\n    let cursorPrimitive = new Primitive(cursorAttribs, cursorIndexCount);\n    cursorPrimitive.setIndexBuffer(cursorIndexBuffer);\n\n    let cursorMaterial = new CursorMaterial();\n    let cursorHiddenMaterial = new CursorHiddenMaterial();\n\n    // Cursor renders two parts: The bright opaque cursor for areas where it's\n    // not obscured and a more transparent, darker version for areas where it's\n    // behind another object.\n    let cursorRenderPrimitive = this._renderer.createRenderPrimitive(cursorPrimitive, cursorMaterial);\n    let cursorHiddenRenderPrimitive = this._renderer.createRenderPrimitive(cursorPrimitive, cursorHiddenMaterial);\n    let meshNode = new Node();\n    meshNode.addRenderPrimitive(cursorRenderPrimitive);\n    meshNode.addRenderPrimitive(cursorHiddenRenderPrimitive);\n    return meshNode;\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/*\nRenders simple text using a seven-segment LED style pattern. Only really good\nfor numbers and a limited number of other characters.\n*/\n\nimport {Material} from '../core/material.js';\nimport {Node} from '../core/node.js';\nimport {Primitive, PrimitiveAttribute} from '../core/primitive.js';\n\nconst TEXT_KERNING = 2.0;\n\nclass SevenSegmentMaterial extends Material {\n  get materialName() {\n    return 'SEVEN_SEGMENT_TEXT';\n  }\n\n  get vertexSource() {\n    return `\n    attribute vec2 POSITION;\n\n    vec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n      return proj * view * model * vec4(POSITION, 0.0, 1.0);\n    }`;\n  }\n\n  get fragmentSource() {\n    return `\n    precision mediump float;\n    const vec4 color = vec4(0.0, 1.0, 0.0, 1.0);\n\n    vec4 fragment_main() {\n      return color;\n    }`;\n  }\n}\n\nexport class SevenSegmentText extends Node {\n  constructor() {\n    super();\n\n    this._text = '';\n    this._charNodes = [];\n  }\n\n  onRendererChanged(renderer) {\n    this.clearNodes();\n    this._charNodes = [];\n\n    let vertices = [];\n    let segmentIndices = {};\n    let indices = [];\n\n    const width = 0.5;\n    const thickness = 0.25;\n\n    function defineSegment(id, left, top, right, bottom) {\n      let idx = vertices.length / 2;\n      vertices.push(\n          left, top,\n          right, top,\n          right, bottom,\n          left, bottom);\n\n      segmentIndices[id] = [\n        idx, idx+2, idx+1,\n        idx, idx+3, idx+2,\n      ];\n    }\n\n    let characters = {};\n    function defineCharacter(c, segments) {\n      let character = {\n        character: c,\n        offset: indices.length * 2,\n        count: 0,\n      };\n\n      for (let i = 0; i < segments.length; ++i) {\n        let idx = segments[i];\n        let segment = segmentIndices[idx];\n        character.count += segment.length;\n        indices.push(...segment);\n      }\n\n      characters[c] = character;\n    }\n\n    /* Segment layout is as follows:\n\n    |-0-|\n    3   4\n    |-1-|\n    5   6\n    |-2-|\n\n    */\n\n    defineSegment(0, -1, 1, width, 1-thickness);\n    defineSegment(1, -1, thickness*0.5, width, -thickness*0.5);\n    defineSegment(2, -1, -1+thickness, width, -1);\n    defineSegment(3, -1, 1, -1+thickness, -thickness*0.5);\n    defineSegment(4, width-thickness, 1, width, -thickness*0.5);\n    defineSegment(5, -1, thickness*0.5, -1+thickness, -1);\n    defineSegment(6, width-thickness, thickness*0.5, width, -1);\n\n\n    defineCharacter('0', [0, 2, 3, 4, 5, 6]);\n    defineCharacter('1', [4, 6]);\n    defineCharacter('2', [0, 1, 2, 4, 5]);\n    defineCharacter('3', [0, 1, 2, 4, 6]);\n    defineCharacter('4', [1, 3, 4, 6]);\n    defineCharacter('5', [0, 1, 2, 3, 6]);\n    defineCharacter('6', [0, 1, 2, 3, 5, 6]);\n    defineCharacter('7', [0, 4, 6]);\n    defineCharacter('8', [0, 1, 2, 3, 4, 5, 6]);\n    defineCharacter('9', [0, 1, 2, 3, 4, 6]);\n    defineCharacter('A', [0, 1, 3, 4, 5, 6]);\n    defineCharacter('B', [1, 2, 3, 5, 6]);\n    defineCharacter('C', [0, 2, 3, 5]);\n    defineCharacter('D', [1, 2, 4, 5, 6]);\n    defineCharacter('E', [0, 1, 2, 4, 6]);\n    defineCharacter('F', [0, 1, 3, 5]);\n    defineCharacter('P', [0, 1, 3, 4, 5]);\n    defineCharacter('-', [1]);\n    defineCharacter(' ', []);\n    defineCharacter('_', [2]); // Used for undefined characters\n\n    let gl = renderer.gl;\n    let vertexBuffer = renderer.createRenderBuffer(gl.ARRAY_BUFFER, new Float32Array(vertices));\n    let indexBuffer = renderer.createRenderBuffer(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices));\n\n    let vertexAttribs = [\n      new PrimitiveAttribute('POSITION', vertexBuffer, 2, gl.FLOAT, 8, 0),\n    ];\n\n    let primitive = new Primitive(vertexAttribs, indices.length);\n    primitive.setIndexBuffer(indexBuffer);\n\n    let material = new SevenSegmentMaterial();\n\n    this._charPrimitives = {};\n    for (let char in characters) {\n      let charDef = characters[char];\n      primitive.elementCount = charDef.count;\n      primitive.indexByteOffset = charDef.offset;\n      this._charPrimitives[char] = renderer.createRenderPrimitive(primitive, material);\n    }\n\n    this.text = this._text;\n  }\n\n  get text() {\n    return this._text;\n  }\n\n  set text(value) {\n    this._text = value;\n\n    let i = 0;\n    let charPrimitive = null;\n    for (; i < value.length; ++i) {\n      if (value[i] in this._charPrimitives) {\n        charPrimitive = this._charPrimitives[value[i]];\n      } else {\n        charPrimitive = this._charPrimitives['_'];\n      }\n\n      if (this._charNodes.length <= i) {\n        let node = new Node();\n        node.addRenderPrimitive(charPrimitive);\n        let offset = i * TEXT_KERNING;\n        node.translation = [offset, 0, 0];\n        this._charNodes.push(node);\n        this.addNode(node);\n      } else {\n        // This is sort of an abuse of how these things are expected to work,\n        // but it's the cheapest thing I could think of that didn't break the\n        // world.\n        this._charNodes[i].clearRenderPrimitives();\n        this._charNodes[i].addRenderPrimitive(charPrimitive);\n        this._charNodes[i].visible = true;\n      }\n    }\n\n    // If there's any nodes left over make them invisible\n    for (; i < this._charNodes.length; ++i) {\n      this._charNodes[i].visible = false;\n    }\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/*\nNode for displaying 360 equirect images as a skybox.\n*/\n\nimport {Material, RENDER_ORDER} from '../core/material.js';\nimport {Primitive, PrimitiveAttribute} from '../core/primitive.js';\nimport {Node} from '../core/node.js';\nimport {UrlTexture} from '../core/texture.js';\n\nconst GL = WebGLRenderingContext; // For enums\n\nclass SkyboxMaterial extends Material {\n  constructor() {\n    super();\n    this.renderOrder = RENDER_ORDER.SKY;\n    this.state.depthFunc = GL.LEQUAL;\n    this.state.depthMask = false;\n\n    this.image = this.defineSampler('diffuse');\n\n    this.texCoordScaleOffset = this.defineUniform('texCoordScaleOffset',\n                                                      [1.0, 1.0, 0.0, 0.0,\n                                                       1.0, 1.0, 0.0, 0.0], 4);\n  }\n\n  get materialName() {\n    return 'SKYBOX';\n  }\n\n  get vertexSource() {\n    return `\n    uniform int EYE_INDEX;\n    uniform vec4 texCoordScaleOffset[2];\n    attribute vec3 POSITION;\n    attribute vec2 TEXCOORD_0;\n    varying vec2 vTexCoord;\n\n    vec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n      vec4 scaleOffset = texCoordScaleOffset[EYE_INDEX];\n      vTexCoord = (TEXCOORD_0 * scaleOffset.xy) + scaleOffset.zw;\n      // Drop the translation portion of the view matrix\n      view[3].xyz = vec3(0.0, 0.0, 0.0);\n      vec4 out_vec = proj * view * model * vec4(POSITION, 1.0);\n\n      // Returning the W component for both Z and W forces the geometry depth to\n      // the far plane. When combined with a depth func of LEQUAL this makes the\n      // sky write to any depth fragment that has not been written to yet.\n      return out_vec.xyww;\n    }`;\n  }\n\n  get fragmentSource() {\n    return `\n    uniform sampler2D diffuse;\n    varying vec2 vTexCoord;\n\n    vec4 fragment_main() {\n      return texture2D(diffuse, vTexCoord);\n    }`;\n  }\n}\n\nexport class SkyboxNode extends Node {\n  constructor(options) {\n    super();\n\n    this._url = options.url;\n    this._displayMode = options.displayMode || 'mono';\n    this._rotationY = options.rotationY || 0;\n  }\n\n  onRendererChanged(renderer) {\n    let vertices = [];\n    let indices = [];\n\n    let latSegments = 40;\n    let lonSegments = 40;\n\n    // Create the vertices/indices\n    for (let i=0; i <= latSegments; ++i) {\n      let theta = i * Math.PI / latSegments;\n      let sinTheta = Math.sin(theta);\n      let cosTheta = Math.cos(theta);\n\n      let idxOffsetA = i * (lonSegments+1);\n      let idxOffsetB = (i+1) * (lonSegments+1);\n\n      for (let j=0; j <= lonSegments; ++j) {\n        let phi = (j * 2 * Math.PI / lonSegments) + this._rotationY;\n        let x = Math.sin(phi) * sinTheta;\n        let y = cosTheta;\n        let z = -Math.cos(phi) * sinTheta;\n        let u = (j / lonSegments);\n        let v = (i / latSegments);\n\n        // Vertex shader will force the geometry to the far plane, so the\n        // radius of the sphere is immaterial.\n        vertices.push(x, y, z, u, v);\n\n        if (i < latSegments && j < lonSegments) {\n          let idxA = idxOffsetA+j;\n          let idxB = idxOffsetB+j;\n\n          indices.push(idxA, idxB, idxA+1,\n                       idxB, idxB+1, idxA+1);\n        }\n      }\n    }\n\n    let vertexBuffer = renderer.createRenderBuffer(GL.ARRAY_BUFFER, new Float32Array(vertices));\n    let indexBuffer = renderer.createRenderBuffer(GL.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices));\n\n    let attribs = [\n      new PrimitiveAttribute('POSITION', vertexBuffer, 3, GL.FLOAT, 20, 0),\n      new PrimitiveAttribute('TEXCOORD_0', vertexBuffer, 2, GL.FLOAT, 20, 12),\n    ];\n\n    let primitive = new Primitive(attribs, indices.length);\n    primitive.setIndexBuffer(indexBuffer);\n\n    let material = new SkyboxMaterial();\n    material.image.texture = new UrlTexture(this._url);\n\n    switch (this._displayMode) {\n      case 'mono':\n        material.texCoordScaleOffset.value = [1.0, 1.0, 0.0, 0.0,\n                                              1.0, 1.0, 0.0, 0.0];\n        break;\n      case 'stereoTopBottom':\n        material.texCoordScaleOffset.value = [1.0, 0.5, 0.0, 0.0,\n                                              1.0, 0.5, 0.0, 0.5];\n        break;\n      case 'stereoLeftRight':\n        material.texCoordScaleOffset.value = [0.5, 1.0, 0.0, 0.0,\n                                              0.5, 1.0, 0.5, 0.0];\n        break;\n    }\n\n    let renderPrimitive = renderer.createRenderPrimitive(primitive, material);\n    this.addRenderPrimitive(renderPrimitive);\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/*\nHeavily inspired by Mr. Doobs stats.js, this FPS counter is rendered completely\nwith WebGL, allowing it to be shown in cases where overlaid HTML elements aren't\nusable (like WebXR), or if you want the FPS counter to be rendered as part of\nyour scene.\n*/\n\nimport {Material} from '../core/material.js';\nimport {Node} from '../core/node.js';\nimport {Primitive, PrimitiveAttribute} from '../core/primitive.js';\nimport {SevenSegmentText} from './seven-segment-text.js';\n\nconst SEGMENTS = 30;\nconst MAX_FPS = 90;\n\nclass StatsMaterial extends Material {\n  get materialName() {\n    return 'STATS_VIEWER';\n  }\n\n  get vertexSource() {\n    return `\n    attribute vec3 POSITION;\n    attribute vec3 COLOR_0;\n    varying vec4 vColor;\n\n    vec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n      vColor = vec4(COLOR_0, 1.0);\n      return proj * view * model * vec4(POSITION, 1.0);\n    }`;\n  }\n\n  get fragmentSource() {\n    return `\n    precision mediump float;\n    varying vec4 vColor;\n\n    vec4 fragment_main() {\n      return vColor;\n    }`;\n  }\n}\n\nfunction segmentToX(i) {\n  return ((0.9/SEGMENTS) * i) - 0.45;\n}\n\nfunction fpsToY(value) {\n  return (Math.min(value, MAX_FPS) * (0.7 / MAX_FPS)) - 0.45;\n}\n\nfunction fpsToRGB(value) {\n  return {\n    r: Math.max(0.0, Math.min(1.0, 1.0 - (value/60))),\n    g: Math.max(0.0, Math.min(1.0, ((value-15)/(MAX_FPS-15)))),\n    b: Math.max(0.0, Math.min(1.0, ((value-15)/(MAX_FPS-15)))),\n  };\n}\n\nlet now = (window.performance && performance.now) ? performance.now.bind(performance) : Date.now;\n\nexport class StatsViewer extends Node {\n  constructor() {\n    super();\n\n    this._performanceMonitoring = false;\n\n    this._startTime = now();\n    this._prevFrameTime = this._startTime;\n    this._prevGraphUpdateTime = this._startTime;\n    this._frames = 0;\n    this._fpsAverage = 0;\n    this._fpsMin = 0;\n    this._fpsStep = this._performanceMonitoring ? 1000 : 250;\n    this._lastSegment = 0;\n\n    this._fpsVertexBuffer = null;\n    this._fpsRenderPrimitive = null;\n    this._fpsNode = null;\n\n    this._sevenSegmentNode = new SevenSegmentText();\n    // Hard coded because it doesn't change:\n    // Scale by 0.075 in X and Y\n    // Translate into upper left corner w/ z = 0.02\n    this._sevenSegmentNode.matrix = new Float32Array([\n      0.075, 0, 0, 0,\n      0, 0.075, 0, 0,\n      0, 0, 1, 0,\n      -0.3625, 0.3625, 0.02, 1,\n    ]);\n  }\n\n  onRendererChanged(renderer) {\n    this.clearNodes();\n\n    let gl = renderer.gl;\n\n    let fpsVerts = [];\n    let fpsIndices = [];\n\n    // Graph geometry\n    for (let i = 0; i < SEGMENTS; ++i) {\n      // Bar top\n      fpsVerts.push(segmentToX(i), fpsToY(0), 0.02, 0.0, 1.0, 1.0);\n      fpsVerts.push(segmentToX(i+1), fpsToY(0), 0.02, 0.0, 1.0, 1.0);\n\n      // Bar bottom\n      fpsVerts.push(segmentToX(i), fpsToY(0), 0.02, 0.0, 1.0, 1.0);\n      fpsVerts.push(segmentToX(i+1), fpsToY(0), 0.02, 0.0, 1.0, 1.0);\n\n      let idx = i * 4;\n      fpsIndices.push(idx, idx+3, idx+1,\n                       idx+3, idx, idx+2);\n    }\n\n    function addBGSquare(left, bottom, right, top, z, r, g, b) {\n      let idx = fpsVerts.length / 6;\n\n      fpsVerts.push(left, bottom, z, r, g, b);\n      fpsVerts.push(right, top, z, r, g, b);\n      fpsVerts.push(left, top, z, r, g, b);\n      fpsVerts.push(right, bottom, z, r, g, b);\n\n      fpsIndices.push(idx, idx+1, idx+2,\n                       idx, idx+3, idx+1);\n    }\n\n    // Panel Background\n    addBGSquare(-0.5, -0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.125);\n\n    // FPS Background\n    addBGSquare(-0.45, -0.45, 0.45, 0.25, 0.01, 0.0, 0.0, 0.4);\n\n    // 30 FPS line\n    addBGSquare(-0.45, fpsToY(30), 0.45, fpsToY(32), 0.015, 0.5, 0.0, 0.5);\n\n    // 60 FPS line\n    addBGSquare(-0.45, fpsToY(60), 0.45, fpsToY(62), 0.015, 0.2, 0.0, 0.75);\n\n    this._fpsVertexBuffer = renderer.createRenderBuffer(gl.ARRAY_BUFFER, new Float32Array(fpsVerts), gl.DYNAMIC_DRAW);\n    let fpsIndexBuffer = renderer.createRenderBuffer(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(fpsIndices));\n\n    let fpsAttribs = [\n      new PrimitiveAttribute('POSITION', this._fpsVertexBuffer, 3, gl.FLOAT, 24, 0),\n      new PrimitiveAttribute('COLOR_0', this._fpsVertexBuffer, 3, gl.FLOAT, 24, 12),\n    ];\n\n    let fpsPrimitive = new Primitive(fpsAttribs, fpsIndices.length);\n    fpsPrimitive.setIndexBuffer(fpsIndexBuffer);\n    fpsPrimitive.setBounds([-0.5, -0.5, 0.0], [0.5, 0.5, 0.015]);\n\n    this._fpsRenderPrimitive = renderer.createRenderPrimitive(fpsPrimitive, new StatsMaterial());\n    this._fpsNode = new Node();\n    this._fpsNode.addRenderPrimitive(this._fpsRenderPrimitive);\n\n    this.addNode(this._fpsNode);\n    this.addNode(this._sevenSegmentNode);\n  }\n\n  get performanceMonitoring() {\n    return this._performanceMonitoring;\n  }\n\n  set performanceMonitoring(value) {\n    this._performanceMonitoring = value;\n    this._fpsStep = value ? 1000 : 250;\n  }\n\n  begin() {\n    this._startTime = now();\n  }\n\n  end() {\n    let time = now();\n\n    let frameFps = 1000 / (time - this._prevFrameTime);\n    this._prevFrameTime = time;\n    this._fpsMin = this._frames ? Math.min(this._fpsMin, frameFps) : frameFps;\n    this._frames++;\n\n    if (time > this._prevGraphUpdateTime + this._fpsStep) {\n      let intervalTime = time - this._prevGraphUpdateTime;\n      this._fpsAverage = Math.round(1000 / (intervalTime / this._frames));\n\n      // Draw both average and minimum FPS for this period\n      // so that dropped frames are more clearly visible.\n      this._updateGraph(this._fpsMin, this._fpsAverage);\n      if (this._performanceMonitoring) {\n        console.log(`Average FPS: ${this._fpsAverage} Min FPS: ${this._fpsMin}`);\n      }\n\n      this._prevGraphUpdateTime = time;\n      this._frames = 0;\n      this._fpsMin = 0;\n    }\n  }\n\n  _updateGraph(valueLow, valueHigh) {\n    let color = fpsToRGB(valueLow);\n    // Draw a range from the low to high value. Artificially widen the\n    // range a bit to ensure that near-equal values still remain\n    // visible - the logic here should match that used by the\n    // \"60 FPS line\" setup below. Hitting 60fps consistently will\n    // keep the top half of the 60fps background line visible.\n    let y0 = fpsToY(valueLow - 1);\n    let y1 = fpsToY(valueHigh + 1);\n\n    // Update the current segment with the new FPS value\n    let updateVerts = [\n      segmentToX(this._lastSegment), y1, 0.02, color.r, color.g, color.b,\n      segmentToX(this._lastSegment+1), y1, 0.02, color.r, color.g, color.b,\n      segmentToX(this._lastSegment), y0, 0.02, color.r, color.g, color.b,\n      segmentToX(this._lastSegment+1), y0, 0.02, color.r, color.g, color.b,\n    ];\n\n    // Re-shape the next segment into the green \"progress\" line\n    color.r = 0.2;\n    color.g = 1.0;\n    color.b = 0.2;\n\n    if (this._lastSegment == SEGMENTS - 1) {\n      // If we're updating the last segment we need to do two bufferSubDatas\n      // to update the segment and turn the first segment into the progress line.\n      this._renderer.updateRenderBuffer(this._fpsVertexBuffer, new Float32Array(updateVerts),\n                                        this._lastSegment * 24 * 4);\n      updateVerts = [\n        segmentToX(0), fpsToY(MAX_FPS), 0.02, color.r, color.g, color.b,\n        segmentToX(.25), fpsToY(MAX_FPS), 0.02, color.r, color.g, color.b,\n        segmentToX(0), fpsToY(0), 0.02, color.r, color.g, color.b,\n        segmentToX(.25), fpsToY(0), 0.02, color.r, color.g, color.b,\n      ];\n      this._renderer.updateRenderBuffer(this._fpsVertexBuffer, new Float32Array(updateVerts), 0);\n    } else {\n      updateVerts.push(\n        segmentToX(this._lastSegment+1), fpsToY(MAX_FPS), 0.02, color.r, color.g, color.b,\n        segmentToX(this._lastSegment+1.25), fpsToY(MAX_FPS), 0.02, color.r, color.g, color.b,\n        segmentToX(this._lastSegment+1), fpsToY(0), 0.02, color.r, color.g, color.b,\n        segmentToX(this._lastSegment+1.25), fpsToY(0), 0.02, color.r, color.g, color.b\n      );\n      this._renderer.updateRenderBuffer(this._fpsVertexBuffer, new Float32Array(updateVerts),\n                                        this._lastSegment * 24 * 4);\n    }\n\n    this._lastSegment = (this._lastSegment+1) % SEGMENTS;\n\n    this._sevenSegmentNode.text = `${this._fpsAverage} FP5`;\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/*\nNode for displaying 2D or stereo videos on a quad.\n*/\n\nimport {Material} from '../core/material.js';\nimport {Primitive, PrimitiveAttribute} from '../core/primitive.js';\nimport {Node} from '../core/node.js';\nimport {VideoTexture} from '../core/texture.js';\n\nconst GL = WebGLRenderingContext; // For enums\n\nclass VideoMaterial extends Material {\n  constructor() {\n    super();\n\n    this.image = this.defineSampler('diffuse');\n\n    this.texCoordScaleOffset = this.defineUniform('texCoordScaleOffset',\n                                                      [1.0, 1.0, 0.0, 0.0,\n                                                       1.0, 1.0, 0.0, 0.0], 4);\n  }\n\n  get materialName() {\n    return 'VIDEO_PLAYER';\n  }\n\n  get vertexSource() {\n    return `\n    uniform int EYE_INDEX;\n    uniform vec4 texCoordScaleOffset[2];\n    attribute vec3 POSITION;\n    attribute vec2 TEXCOORD_0;\n    varying vec2 vTexCoord;\n\n    vec4 vertex_main(mat4 proj, mat4 view, mat4 model) {\n      vec4 scaleOffset = texCoordScaleOffset[EYE_INDEX];\n      vTexCoord = (TEXCOORD_0 * scaleOffset.xy) + scaleOffset.zw;\n      vec4 out_vec = proj * view * model * vec4(POSITION, 1.0);\n      return out_vec;\n    }`;\n  }\n\n  get fragmentSource() {\n    return `\n    uniform sampler2D diffuse;\n    varying vec2 vTexCoord;\n\n    vec4 fragment_main() {\n      return texture2D(diffuse, vTexCoord);\n    }`;\n  }\n}\n\nexport class VideoNode extends Node {\n  constructor(options) {\n    super();\n\n    this._video = options.video;\n    this._displayMode = options.displayMode || 'mono';\n\n    this._video_texture = new VideoTexture(this._video);\n  }\n\n  get aspectRatio() {\n    let width = this._video.videoWidth;\n    let height = this._video.videoHeight;\n\n    switch (this._displayMode) {\n      case 'stereoTopBottom': height *= 0.5; break;\n      case 'stereoLeftRight': width *= 0.5; break;\n    }\n\n    if (!height || !width) {\n      return 1;\n    }\n\n    return width / height;\n  }\n\n  onRendererChanged(renderer) {\n    let vertices = [\n      -1.0, 1.0, 0.0, 0.0, 0.0,\n       1.0, 1.0, 0.0, 1.0, 0.0,\n       1.0, -1.0, 0.0, 1.0, 1.0,\n      -1.0, -1.0, 0.0, 0.0, 1.0,\n    ];\n    let indices = [\n      0, 2, 1,\n      0, 3, 2,\n    ];\n\n    let vertexBuffer = renderer.createRenderBuffer(GL.ARRAY_BUFFER, new Float32Array(vertices));\n    let indexBuffer = renderer.createRenderBuffer(GL.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices));\n\n    let attribs = [\n      new PrimitiveAttribute('POSITION', vertexBuffer, 3, GL.FLOAT, 20, 0),\n      new PrimitiveAttribute('TEXCOORD_0', vertexBuffer, 2, GL.FLOAT, 20, 12),\n    ];\n\n    let primitive = new Primitive(attribs, indices.length);\n    primitive.setIndexBuffer(indexBuffer);\n    primitive.setBounds([-1.0, -1.0, 0.0], [1.0, 1.0, 0.015]);\n\n    let material = new VideoMaterial();\n    material.image.texture = this._video_texture;\n\n    switch (this._displayMode) {\n      case 'mono':\n        material.texCoordScaleOffset.value = [1.0, 1.0, 0.0, 0.0,\n                                                 1.0, 1.0, 0.0, 0.0];\n        break;\n      case 'stereoTopBottom':\n        material.texCoordScaleOffset.value = [1.0, 0.5, 0.0, 0.0,\n                                                 1.0, 0.5, 0.0, 0.5];\n        break;\n      case 'stereoLeftRight':\n        material.texCoordScaleOffset.value = [0.5, 1.0, 0.0, 0.0,\n                                                 0.5, 1.0, 0.5, 0.0];\n        break;\n    }\n\n    let renderPrimitive = renderer.createRenderPrimitive(primitive, material);\n    this.addRenderPrimitive(renderPrimitive);\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {RenderView} from '../core/renderer.js';\nimport {InputRenderer} from '../nodes/input-renderer.js';\nimport {StatsViewer} from '../nodes/stats-viewer.js';\nimport {Node} from '../core/node.js';\nimport {vec3, quat} from '../math/gl-matrix.js';\n\nexport class WebXRView extends RenderView {\n  constructor(view, pose, layer) {\n    super(\n      view ? view.projectionMatrix : null,\n      (pose && view) ? view.viewMatrix : null,\n      (layer && view) ? layer.getViewport(view) : null,\n      view ? view.eye : 'left'\n    );\n  }\n}\n\nexport class Scene extends Node {\n  constructor() {\n    super();\n\n    this._timestamp = -1;\n    this._frameDelta = 0;\n    this._statsStanding = false;\n    this._stats = null;\n    this._statsEnabled = false;\n    this.enableStats(true); // Ensure the stats are added correctly by default.\n\n    this._inputRenderer = null;\n    this._resetInputEndFrame = true;\n\n    this._lastTimestamp = 0;\n\n    this._hoverFrame = 0;\n    this._hoveredNodes = [];\n\n    this.clear = true;\n  }\n\n  setRenderer(renderer) {\n    this._setRenderer(renderer);\n  }\n\n  loseRenderer() {\n    if (this._renderer) {\n      this._stats = null;\n      this._renderer = null;\n      this._inputRenderer = null;\n    }\n  }\n\n  get inputRenderer() {\n    if (!this._inputRenderer) {\n      this._inputRenderer = new InputRenderer();\n      this.addNode(this._inputRenderer);\n    }\n    return this._inputRenderer;\n  }\n\n  // Helper function that automatically adds the appropriate visual elements for\n  // all input sources.\n  updateInputSources(frame, refSpace) {\n    // FIXME: Check for the existence of the API first. This check should be\n    // removed once the input API is part of the official spec.\n    if (!frame.session.getInputSources) {\n      return;\n    }\n\n    let inputSources = frame.session.getInputSources();\n\n    let newHoveredNodes = [];\n    let lastHoverFrame = this._hoverFrame;\n    this._hoverFrame++;\n\n    for (let inputSource of inputSources) {\n      let inputPose = frame.getInputPose(inputSource, refSpace);\n\n      if (!inputPose) {\n        continue;\n      }\n\n      // Any time that we have a grip matrix, we'll render a controller.\n      if (inputPose.gripTransform.matrix) {\n        this.inputRenderer.addController(inputPose.gripTransform.matrix);\n      }\n\n      if (inputPose.targetRay) {\n        if (inputSource.targetRayMode == 'tracked-pointer') {\n          // If we have a pointer matrix and the pointer origin is the users\n          // hand (as opposed to their head or the screen) use it to render\n          // a ray coming out of the input device to indicate the pointer\n          // direction.\n          this.inputRenderer.addLaserPointer(inputPose.targetRay);\n        }\n\n        // If we have a pointer matrix we can also use it to render a cursor\n        // for both handheld and gaze-based input sources.\n\n        // Check and see if the pointer is pointing at any selectable objects.\n        let hitResult = this.hitTest(inputPose.targetRay);\n\n        if (hitResult) {\n          // Render a cursor at the intersection point.\n          this.inputRenderer.addCursor(hitResult.intersection);\n\n          if (hitResult.node._hoverFrameId != lastHoverFrame) {\n            hitResult.node.onHoverStart();\n          }\n          hitResult.node._hoverFrameId = this._hoverFrame;\n          newHoveredNodes.push(hitResult.node);\n        } else {\n          // Statically render the cursor 1 meters down the ray since we didn't\n          // hit anything selectable.\n          let cursorDistance = 1.0;\n          let cursorPos = vec3.fromValues(\n              inputPose.targetRay.origin.x,\n              inputPose.targetRay.origin.y,\n              inputPose.targetRay.origin.z\n              );\n          vec3.add(cursorPos, cursorPos, [\n              inputPose.targetRay.direction.x * cursorDistance,\n              inputPose.targetRay.direction.y * cursorDistance,\n              inputPose.targetRay.direction.z * cursorDistance,\n              ]);\n          // let cursorPos = vec3.fromValues(0, 0, -1.0);\n          // vec3.transformMat4(cursorPos, cursorPos, inputPose.targetRay);\n          this.inputRenderer.addCursor(cursorPos);\n        }\n      }\n    }\n\n    for (let hoverNode of this._hoveredNodes) {\n      if (hoverNode._hoverFrameId != this._hoverFrame) {\n        hoverNode.onHoverEnd();\n      }\n    }\n\n    this._hoveredNodes = newHoveredNodes;\n  }\n\n  handleSelect(inputSource, frame, refSpace) {\n    let inputPose = frame.getInputPose(inputSource, refSpace);\n\n    if (!inputPose) {\n      return;\n    }\n\n    this.handleSelectPointer(inputPose.targetRay);\n  }\n\n  handleSelectPointer(targetRay) {\n    if (targetRay) {\n      // Check and see if the pointer is pointing at any selectable objects.\n      let hitResult = this.hitTest(targetRay);\n\n      if (hitResult) {\n        // Render a cursor at the intersection point.\n        hitResult.node.handleSelect();\n      }\n    }\n  }\n\n  enableStats(enable) {\n    if (enable == this._statsEnabled) {\n      return;\n    }\n\n    this._statsEnabled = enable;\n\n    if (enable) {\n      this._stats = new StatsViewer();\n      this._stats.selectable = true;\n      this.addNode(this._stats);\n\n      if (this._statsStanding) {\n        this._stats.translation = [0, 1.4, -0.75];\n      } else {\n        this._stats.translation = [0, -0.3, -0.5];\n      }\n      this._stats.scale = [0.3, 0.3, 0.3];\n      quat.fromEuler(this._stats.rotation, -45.0, 0.0, 0.0);\n    } else if (!enable) {\n      if (this._stats) {\n        this.removeNode(this._stats);\n        this._stats = null;\n      }\n    }\n  }\n\n  standingStats(enable) {\n    this._statsStanding = enable;\n    if (this._stats) {\n      if (this._statsStanding) {\n        this._stats.translation = [0, 1.4, -0.75];\n      } else {\n        this._stats.translation = [0, -0.3, -0.5];\n      }\n      this._stats.scale = [0.3, 0.3, 0.3];\n      quat.fromEuler(this._stats.rotation, -45.0, 0.0, 0.0);\n    }\n  }\n\n  draw(projectionMatrix, viewMatrix, eye) {\n    let view = new RenderView();\n    view.projectionMatrix = projectionMatrix;\n    view.viewMatrix = viewMatrix;\n    if (eye) {\n      view.eye = eye;\n    }\n\n    this.drawViewArray([view]);\n  }\n\n  /** Draws the scene into the base layer of the XRFrame's session */\n  drawXRFrame(xrFrame, pose) {\n    if (!this._renderer || !pose) {\n      return;\n    }\n\n    let gl = this._renderer.gl;\n    let session = xrFrame.session;\n    // Assumed to be a XRWebGLLayer for now.\n    let layer = session.renderState.baseLayer;\n\n    if (!gl) {\n      return;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, layer.framebuffer);\n\n    if (this.clear) {\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    let views = [];\n    for (let view of pose.views) {\n      views.push(new WebXRView(view, pose, layer));\n    }\n\n    this.drawViewArray(views);\n  }\n\n  drawViewArray(views) {\n    // Don't draw when we don't have a valid context\n    if (!this._renderer) {\n      return;\n    }\n\n    this._renderer.drawViews(views, this);\n  }\n\n  startFrame() {\n    let prevTimestamp = this._timestamp;\n    this._timestamp = performance.now();\n    if (this._stats) {\n      this._stats.begin();\n    }\n\n    if (prevTimestamp >= 0) {\n      this._frameDelta = this._timestamp - prevTimestamp;\n    } else {\n      this._frameDelta = 0;\n    }\n\n    this._update(this._timestamp, this._frameDelta);\n\n    return this._frameDelta;\n  }\n\n  endFrame() {\n    if (this._inputRenderer && this._resetInputEndFrame) {\n      this._inputRenderer.reset();\n    }\n\n    if (this._stats) {\n      this._stats.end();\n    }\n  }\n\n  // Override to load scene resources on construction or context restore.\n  onLoadScene(renderer) {\n    return Promise.resolve();\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport {mat4} from '../math/gl-matrix.js';\n\nconst LOOK_SPEED = 0.0025;\n\nexport class FallbackHelper {\n  constructor(scene, gl) {\n    this.scene = scene;\n    this.gl = gl;\n    this._emulateStage = false;\n\n    this.lookYaw = 0;\n    this.lookPitch = 0;\n\n    this.viewMatrix = mat4.create();\n\n    let projectionMatrix = mat4.create();\n    this.projectionMatrix = projectionMatrix;\n\n    // Using a simple identity matrix for the view.\n    mat4.identity(this.viewMatrix);\n\n    // We need to track the canvas size in order to resize the WebGL\n    // backbuffer width and height, as well as update the projection matrix\n    // and adjust the viewport.\n    function onResize() {\n      gl.canvas.width = gl.canvas.offsetWidth * window.devicePixelRatio;\n      gl.canvas.height = gl.canvas.offsetHeight * window.devicePixelRatio;\n      mat4.perspective(projectionMatrix, Math.PI*0.4,\n                       gl.canvas.width/gl.canvas.height,\n                       0.1, 1000.0);\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    window.addEventListener('resize', onResize);\n    onResize();\n\n    // Upding the view matrix with touch or mouse events.\n    let canvas = gl.canvas;\n    let lastTouchX = 0;\n    let lastTouchY = 0;\n    canvas.addEventListener('touchstart', (ev) => {\n      if (ev.touches.length == 2) {\n        lastTouchX = ev.touches[1].pageX;\n        lastTouchY = ev.touches[1].pageY;\n      }\n    });\n    canvas.addEventListener('touchmove', (ev) => {\n      // Rotate the view when two fingers are being used.\n      if (ev.touches.length == 2) {\n        this.onLook(ev.touches[1].pageX - lastTouchX, ev.touches[1].pageY - lastTouchY);\n        lastTouchX = ev.touches[1].pageX;\n        lastTouchY = ev.touches[1].pageY;\n      }\n    });\n    canvas.addEventListener('mousemove', (ev) => {\n      // Only rotate when the right button is pressed.\n      if (ev.buttons & 2) {\n        this.onLook(ev.movementX, ev.movementY);\n      }\n    });\n    canvas.addEventListener('contextmenu', (ev) => {\n      // Prevent context menus on the canvas so that we can use right click to rotate.\n      ev.preventDefault();\n    });\n\n    this.boundOnFrame = this.onFrame.bind(this);\n    window.requestAnimationFrame(this.boundOnFrame);\n  }\n\n  onLook(yaw, pitch) {\n    this.lookYaw += yaw * LOOK_SPEED;\n    this.lookPitch += pitch * LOOK_SPEED;\n\n    // Clamp pitch rotation beyond looking straight up or down.\n    if (this.lookPitch < -Math.PI*0.5) {\n        this.lookPitch = -Math.PI*0.5;\n    }\n    if (this.lookPitch > Math.PI*0.5) {\n        this.lookPitch = Math.PI*0.5;\n    }\n\n    this.updateView();\n  }\n\n  onFrame(t) {\n    let gl = this.gl;\n    window.requestAnimationFrame(this.boundOnFrame);\n\n    this.scene.startFrame();\n\n    // We can skip setting the framebuffer and viewport every frame, because\n    // it won't change from frame to frame and we're updating the viewport\n    // only when we resize for efficency.\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // We're drawing with our own projection and view matrix now, and we\n    // don't have a list of view to loop through, but otherwise all of the\n    // WebGL drawing logic is exactly the same.\n    this.scene.draw(this.projectionMatrix, this.viewMatrix);\n\n    this.scene.endFrame();\n  }\n\n  get emulateStage() {\n    return this._emulateStage;\n  }\n\n  set emulateStage(value) {\n    this._emulateStage = value;\n    this.updateView();\n  }\n\n  updateView() {\n    mat4.identity(this.viewMatrix);\n\n    mat4.rotateX(this.viewMatrix, this.viewMatrix, -this.lookPitch);\n    mat4.rotateY(this.viewMatrix, this.viewMatrix, -this.lookYaw);\n\n    // If we're emulating a stage frame of reference we'll need to move the view\n    // matrix roughly a meter and a half up in the air.\n    if (this._emulateStage) {\n      mat4.translate(this.viewMatrix, this.viewMatrix, [0, -1.6, 0]);\n    }\n  }\n}\n","// Copyright 2018 The Immersive Web Community Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/*\nProvides a simple way to get values from the query string if they're present\nand use a default value if not. Not strictly a \"WebGL\" utility, but I use it\nfrequently enough for debugging that I wanted to include it here.\n\nExample:\nFor the URL http://example.com/index.html?particleCount=1000\n\nQueryArgs.getInt(\"particleCount\", 100); // URL overrides, returns 1000\nQueryArgs.getInt(\"particleSize\", 10); // Not in URL, returns default of 10\n*/\n\nlet urlArgs = null;\nwindow.onhashchange = function() {\n  // Force re-parsing on next access\n  urlArgs = null;\n};\n\nfunction ensureArgsCached() {\n  if (!urlArgs) {\n    urlArgs = {};\n    let query = window.location.search.substring(1) || window.location.hash.substring(1);\n    let vars = query.split('&');\n    for (let i = 0; i < vars.length; i++) {\n      let pair = vars[i].split('=');\n      urlArgs[pair[0].toLowerCase()] = decodeURIComponent(pair[1]);\n    }\n  }\n}\n\nexport class QueryArgs {\n  static getString(name, defaultValue) {\n    ensureArgsCached();\n    let lcaseName = name.toLowerCase();\n    if (lcaseName in urlArgs) {\n      return urlArgs[lcaseName];\n    }\n    return defaultValue;\n  }\n\n  static getInt(name, defaultValue) {\n    ensureArgsCached();\n    let lcaseName = name.toLowerCase();\n    if (lcaseName in urlArgs) {\n      return parseInt(urlArgs[lcaseName], 10);\n    }\n    return defaultValue;\n  }\n\n  static getFloat(name, defaultValue) {\n    ensureArgsCached();\n    let lcaseName = name.toLowerCase();\n    if (lcaseName in urlArgs) {\n      return parseFloat(urlArgs[lcaseName]);\n    }\n    return defaultValue;\n  }\n\n  static getBool(name, defaultValue) {\n    ensureArgsCached();\n    let lcaseName = name.toLowerCase();\n    if (lcaseName in urlArgs) {\n      return parseInt(urlArgs[lcaseName], 10) != 0;\n    }\n    return defaultValue;\n  }\n}\n"],"sourceRoot":""}